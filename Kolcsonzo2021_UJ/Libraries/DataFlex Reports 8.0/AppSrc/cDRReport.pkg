Use cDRAPI.pkg
Use PtrModes.pkg
Use DRLanguage.Inc
Use cApplication.pkg
Use GlobalFunctionsProcedures.pkg
#IFDEF IS$WEBAPP
#ELSE
Use Dferror.pkg
#ENDIF
Use cPrintDialog.pkg
Use cVersionInfo.pkg
Use cDR.h.pkg
Use WinUuid.pkg
#IFDEF IS$WEBAPP
Use FunctionErrorDialog.wo
#ELSE
Use cDRPreview.pkg
Use cCJSkinFramework.pkg
Use DRExportOptions.dg
Use cDRToolPanelPreview.pkg
Use cDRDesktopPreview.pkg
Use FunctionError.dg
#ENDIF
Use cDRReportHelper.pkg
Use cJsonObject.pkg

Define C_$DR_INTEGRATION_VERSION for "8.0.0.3"

Enum_List
    Define C_DRPREVIEW_MODAL
    Define C_DRPREVIEW_VIEW
    Define C_DRPREVIEW_EMBEDDED
    Define C_DRPREVIEW_TOOLPANEL
    Define C_DRPREVIEW_DESKTOPVIEW
End_Enum_List

{ OverrideProperty = psProgId DesignTime = False Visibility = Private }
{ OverrideProperty = psLicenseKey DesignTime = False Visibility = Private }
{ OverrideProperty = Border_Style DesignTime = False Visibility = Private }
{ OverrideProperty = Color DesignTime = False Visibility = Private }
{ OverrideProperty = TextColor DesignTime = False Visibility = Private }
{ OverrideProperty = Visible_State DesignTime = False Visibility = Private }
{ OverrideProperty = Attach_Parent_State DesignTime = False Visibility = Private }
{ OverrideProperty = Block_Mouse_State DesignTime = False Visibility = Private }
{ OverrideProperty = Client_Area_State DesignTime = False Visibility = Private }
{ OverrideProperty = Focus_Mode DesignTime = False Visibility = Private }
{ OverrideProperty = pbBindValue DesignTime = False Visibility = Private }
{ OverrideProperty = peAutoCreate DesignTime = False Visibility = Private }
{ OverrideProperty = Popup_State DesignTime = False Visibility = Private }
{ OverrideProperty = Search_Case DesignTime = False Visibility = Private }
{ OverrideProperty = Skip_State DesignTime = False Visibility = Private }
{ OverrideProperty = Scope_State DesignTime = False Visibility = Private }
{ OverrideProperty = Ring_State DesignTime = False Visibility = Private }
#IFDEF IS$WEBAPP
#ELSE
{ OverrideProperty = Enabled_State DesignTime = False Visibility = Private }
{ OverrideProperty = Label DesignTime = False Visibility = Private }
{ OverrideProperty = Label_Col_Offset DesignTime = False Visibility = Private }
{ OverrideProperty = Label_Color DesignTime = False Visibility = Private }
{ OverrideProperty = Label_FontItalics DesignTime = False Visibility = Private }
{ OverrideProperty = Label_FontSize DesignTime = False Visibility = Private }
{ OverrideProperty = Label_FontUnderLine DesignTime = False Visibility = Private }
{ OverrideProperty = Label_FontWeight DesignTime = False Visibility = Private }
{ OverrideProperty = Label_Justification_Mode DesignTime = False Visibility = Private }
{ OverrideProperty = Label_Row_Offset DesignTime = False Visibility = Private }
{ OverrideProperty = Label_TextColor DesignTime = False Visibility = Private }
{ OverrideProperty = Label_TypeFace DesignTime = False Visibility = Private }
{ OverrideProperty = Label_FontPointHeight DesignTime = False Visibility = Private }
{ OverrideProcedure = Shadow_Display Visibility = Private }
{ OverrideProcedure = OnControlValueChanged Visibility = Private }
{ OverrideProcedure = OnChange Visibility = Private }
#ENDIF
{ OverrideProcedure = Command Visibility = Private }
{ OverrideProcedure = Key Visibility = Private }
{ OverrideProcedure = Entering Visibility = Private }
{ OverrideProcedure = Exiting Visibility = Private }
{ OverrideProcedure = Entering_Scope Visibility = Private }
{ OverrideProcedure = Exiting_Scope Visibility = Private }
{ OverrideProcedure = Mouse_Click Visibility = Private }
{ OverrideProcedure = Mouse_Click2 Visibility = Private }
{ OverrideProcedure = Mouse_Down Visibility = Private }
{ OverrideProcedure = Mouse_Down2 Visibility = Private }
{ OverrideProcedure = Mouse_Up Visibility = Private }
{ OverrideProcedure = Mouse_Up2 Visibility = Private }
{ OverrideProcedure = Mouse_Drag Visibility = Private }
{ OverrideProcedure = Mouse_Drag2 Visibility = Private }
{ OverrideProcedure = OnEnterArea Visibility = Private }
{ OverrideProcedure = OnEnterObject Visibility = Private }
{ OverrideProcedure = OnExitArea Visibility = Private }
{ OverrideProcedure = OnExitObject Visibility = Private }
{ OverrideFunction = OnChildWrapping Visibility = Private }
{ OverrideProcedure = Destroy_Object Visibility = Private }
{ OverrideProcedure = Page Visibility = Private }
{ OverrideProcedure = Page_Delete Visibility = Private }
{ OverrideProcedure = Construct_Object Visibility = Private }
{ ClassLibrary = Common }
Class cDRReport is a cDataFlexReportsAPI
    { Description = "Create properties for outputting the report" }
    { MethodType = Event }
    Procedure Construct_Object
        Forward Send Construct_Object

        { Visibility = Private }
        Set pbBindValue to False

        #IFDEF IS$WEBAPP
        #ELSE
        { Visibility = Private }
        Property Handle private.phoPreviewContainer
        { Visibility = Private }
        Property Integer private.pePreviewStyle C_DRPREVIEW_VIEW
        { Description = "Specify the label to used in the caption-bar of the previewer" }
        { Category = "Output" }
        Property String psPreviewCaptionLabel
        { Description = "Class to be used to create object in case the pePreviewStyle is set to C_DRPREVIEW_VIEW" }
        { Category = "Output" }
        Property Handle phcPreviewer
        { Description = "Show a group tree aside of the report preview" }
        { Category = "Output" }
        { EnumList = "C_DR_GROUPTREE_NONE, C_DR_GROUPTREE_LEFT, C_DR_GROUPTREE_RIGHT" }
        Property Integer peGroupTreeLocation C_DR_GROUPTREE_NONE
        { Description = "Show the hidden groups in the group tree aside of the report preview" }
        { Category = "Output" }
        { InitialValue = False }
        Property Integer pbShowHiddenGroups
        #ENDIF
        { Description = "Name of the report that should be loaded and executed" }
        { Category = "Output" }
        Property String psReportName
        #IFDEF IS$WEBAPP
        { EnumList = "PRINT_TO_FILE, PRINT_TO_PRINTER, PRINT_TO_FILE, PRINT_TO_PRINTER_NO_DIALOG" }
        { Category = "Output" }
        Property Integer peOutputDestination PRINT_TO_FILE
        #ELSE
        { EnumList = "PRINT_TO_WINDOW, PRINT_TO_PRINTER, PRINT_TO_FILE, PRINT_TO_PRINTER_NO_DIALOG" }
        { Category = "Output" }
        { InitialValue = PRINT_TO_WINDOW }
        Property Integer peOutputDestination
        #ENDIF
        { Category = "Behavior" }
        { Description = "When set to true, show information message in an Windows messagebox" }
        Property Boolean pbShowInformationMessages False
        { Category = "Behavior" }
        { Description = "When set to true errors will be displayed" }
        Property Boolean pbDisplayError True
        #IFDEF IS$WEBAPP
        #ELSE
        { Category = "Behavior" }
        { Description = "Object that on loading receives the popup message when pbShowStatusPanel is set to true" }
        { InitialValue = 0 }
        Property Handle phoStatusPanel
        { Category = "Behavior" }
        { Description = "When set to true a popup message is send to the object in phoStatusPanel" }
        Property Boolean pbShowStatusPanel False
        { Category = "Behavior" }
        { Description = "Cancel the process of loading, printing etc when an error occurs" }
        #ENDIF
        Property Boolean pbCancelIfError True
        { DesignTime = False }
        { Description = "Developer can set this property to true to avoid further loading, printing etc" }
        Property Boolean pbCanceled
        { Category = "Behavior" }
        { Description = "When set to true (default) the open report method will attempt to change the path of the tables when DataFlex is the data source" }
        Property Boolean pbAutoLocateDFFiles True
        { DesignTime = False }
        { Description = "This property tells you whether the report had errors" }
        Property Boolean pbHasErrors
        { Description = "This property should hold the name of the file to export to and is used by OutputReport when peOutputDestination = PRINT_TO_FILE" }
        { Category = "Output" }
        Property String psExportFileName
        { Description = "This property should hold C_DRCSV, C_DRPDF, C_DRImage, C_DRHTML, C_DRXLS or C_DRRTF and is used by OutputReport when peOutputDestination = PRINT_TO_FILE" }
        { EnumList = "C_DRPDF, C_DRCSV, C_DRImage, C_DRHTML, C_DRXLS, C_DRRTF"}
        { Category = "Output" }
        Property Integer peExportType C_DRPDF
        { Description = "This property can be set to the Visual DataFlex object that handles export options, default is the oDRExportOptionsDialog" }
        { Category = "Output" }
        { DesignTime = False }
        #IFDEF IS$WEBAPP
        #ELSE
        Property Handle phoExportOptionsDialog (oDRExportOptionsDialog)
        #ENDIF
        { Description = "This property can be set to the address of a PrintDlgEx structure and will be used in OutputReport. When the value remains the default (0) then the PrintReport will open a printer dialog dialog." }
        { Category = "Output" }
        Property Handle phPrintDlg 0
        { Description = "This property contains the DataFlex object ID of a cPrintDialog object. Used by PrintToDefaultPrinter" }
        { Category = "Output" }
        Property Handle phoPrintDialog 0
        { Description = "This property can be set to the name of an existing printer. If set the class attempts to use this printer before using phPrintDlg" }
        { Category = "Output" }
        Property String psPrinterName
        { Description = "This property can be set to the location of the report. If the psReportName does not contain a path this value will be used before looking in the workspace psDataPath" }
        { Category = "Output" }
        Property String psReportPath
        #IFDEF IS$WEBAPP
        #ELSE
        { Description = "Can be set to true to allow the end-user to maximize the output view" }
        { Category = "Output" }
        Property Boolean pbAllowMaximizeView False
        #ENDIF

        #IFDEF IS$WEBAPP
        Property Handle phoReportViewer
        { EnumList = "btNewWindow, btCurrentWindow, btNewTab" }
        Property Integer peBrowserTarget btNewWindow
        { EnumList = "C_drGIF, C_drPNG, C_drJPEG" }
        Property Integer peImageType C_drJPEG
        #ENDIF

        // Private
        { DesignTime = False }
        { Description = "Used to store the determined report location. Should not be set by developers" }
        Property String psReportLocation
        { DesignTime = False }
        { Description = "Handler for the old error object, when the class grabs errors" }
        Property Handle phOldErrorObject Error_Object_Id
        { DesignTime = False }
        { Description = "Determines if the current object handles the errors already" }
        Property Integer piLocalErrorRedirectCount 0
        { DesignTime = False }
        { Description = "When handling an error, this is true and avoids recursive error displays" }
        Property Boolean pbInError
        { DesignTime = False }
        { Description = "Used to store the main report id" }
        Property String psReportId
        { DesignTime = False }
        { Description = "Used to store the information about a function error" }
        Property tDRFunctionErrorInfo pFunctionErrorInfo

        Object oPrintDialog is a cPrintDialog
            Set phoPrintDialog to Self
        End_Object

        Object oDRReportHelper is a cDRReportHelper
        End_Object

        #IFDEF IS$WEBAPP
        #ELSE
        On_Key Key_PgDn Send PreviewNextPage
        On_Key Key_PgUp Send PreviewPreviousPage
        On_Key Key_Ctrl+Key_Home Send PreviewFirstPage
        On_Key Key_Ctrl+Key_End Send PreviewLastPage
        #ENDIF
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    { Description = "Initialize the default previewer class property via the SetDefaultPreviewerClass message" }
    { MethodType = Event }
    Procedure End_Construct_Object
        Forward Send End_Construct_Object

        Send SetDefaultPreviewerClass
    End_Procedure
    #ENDIF

    // ********* PRIVATE INTERFACE ***********

    { Description = "Used in other parts of the DataFlex framework. Is here to avoid errors when asking for the status. Is similar to pbInError" }
    { Visibility = Private }
    Function Error_Processing_State Returns Integer
        Boolean bInError

        Get pbInError to bInError

        Function_Return bInError
    End_Function

    { Description = "Checks if the report is based on a DataFlex datasource. When this is the case the data-source" }
    { Description += "is matched against the current workspace one and if not correct automatically corrected" }
    { Visibility = Private }
    { MethodType = Method }
    Procedure AutoLocateDFFiles String sReportId
        Integer eDatabaseMainType iTables iTable iSubReports iSubReport
        String sOpenPath sDatabaseName sTableSchema sReportName sSubReportId
        Boolean bIsFileList

        Get DatabaseMainType sReportId to eDatabaseMainType
        If (eDatabaseMainType = C_DRDF) Begin
            Get_Attribute DF_OPEN_PATH to sOpenPath
            Set psDatabaseConnection sReportId to sOpenPath

            // This might the filelist or the first table name. If filelist we replace with the
            // current filelist name. We find out if it is the filelist by calling a method
            // IsFileList which Returns True when the file extension is .cfg.
            Get psDatabaseName sReportId to sDatabaseName
            Get IsFileList sDatabaseName to bIsFileList
            If (bIsFileList) Begin
                Get_Attribute DF_FILELIST_NAME to sDatabaseName
                If (sDatabaseName <> "") Begin
                    Set psDatabaseName sReportId to sDatabaseName
                End
                Else Begin
                    Error DFERR_CANT_OPEN_FILE_LIST
                End
            End
            Else Begin
                If (not (DoesFileExist (sDatabaseName))) Begin
                    Move (ExtractFileName (sDatabaseName)) to sDatabaseName
                    Get FindTablePath sDatabaseName to sDatabaseName
                    If (sDatabaseName <> "") Begin
                        Set psDatabaseName sReportId to sDatabaseName
                    End
                End
            End
            Get TableCount sReportId to iTables
            If (iTables >= 1) Begin
                // Enumerate the tables and change the table schema
                Decrement iTables
                For iTable from 0 to iTables
                    Get psTableSchema sReportId iTable to sTableSchema
                    // sTableSchema is blank when the table was opened via the filelist
                    If (sTableSchema <> "") Begin
                        If (not (DoesFileExist (sTableSchema))) Begin
                            Move (ExtractFileName (sTableSchema)) to sTableSchema
                            Get FindTablePath sTableSchema to sTableSchema
                            If (sTableSchema <> "") Begin
                                Set psTableSchema sReportId iTable to sTableSchema
                            End
                            Else Begin
                                Get psReportName to sReportName
                                Get psTableSchema sReportId iTable to sTableSchema
                                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRCannotLocateTable, sTableSchema, sReportName, iTable))
                            End
                        End
                    End
                Loop
            End
        End

        Get SubReportCount sReportId to iSubReports
        Decrement iSubReports
        For iSubReport from 0 to iSubReports
            Get SubReportId sReportId iSubReport to sSubReportId
            Send AutoLocateDFFiles sSubReportId
        Loop
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    { Visibility = Private }
    Procedure ClosePreviewer
        Integer ePreviewStyle
        Handle hoPreviewContainer

        Get pePreviewStyle to ePreviewStyle
        If (ePreviewStyle = C_DRPREVIEW_VIEW or ePreviewStyle = C_DRPREVIEW_TOOLPANEL or ePreviewStyle = C_DRPREVIEW_DESKTOPVIEW) Begin
            Get phoPreviewContainer to hoPreviewContainer
            Get Object_Id of hoPreviewContainer to hoPreviewContainer // Test if the handle is valid
            If (hoPreviewContainer <> 0) Begin
                Send Close_Panel of hoPreviewContainer
            End
        End
    End_Procedure
    #ENDIF

    // When deactivating the object and the report id is still set, close the report
    { MethodType = Event Visibility = Private }
    Procedure Deactivate Integer eDeactivateScope Returns Integer
        Integer iResult
        String sReportId

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Send CloseReport sReportId
        End

        Forward Get msg_Deactivate eDeactivateScope to iResult

        #IFDEF IS$WEBAPP
        #ELSE
        If (sReportId <> "") Begin
            Send ClosePreviewer
        End
        #ENDIF

        Procedure_Return iResult
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    // When activate is sent to the object and the preview mode is not embedded the
    // focus should move to the next object.
    { MethodType = Event Visibility = Private }
    Procedure Activate Returns Integer
        Integer iRetval ePreviewStyle

        Forward Get Msg_Activate to iRetval

        Get pePreviewStyle to ePreviewStyle
        If (ePreviewStyle <> C_DRPREVIEW_EMBEDDED) Begin
            Send Next
        End

        Set Skip_State to (ePreviewStyle <> C_DRPREVIEW_EMBEDDED)

        Procedure_Return iRetval
    End_Procedure
    #ENDIF

    // All errors are directed to this method.
    { MethodType = Event Visibility = Private }
    Procedure Error_Report Integer iErrNum Integer iErrLine String sErrMsg
        Handle hoError
        Boolean bInError bDisplayError bCancelIfError

        Get pbInError to bInError
        If (not (bInError)) Begin
            Set pbInError to True // prevents recursion
            Set pbHasErrors to True  // an error has occurred in the report
            Send OnError iErrNum iErrLine sErrMsg
            Get pbDisplayError to bDisplayError
            If (bDisplayError) Begin // if we display, direct to old error object
                Get phOldErrorObject to hoError
                If (hoError <> 0) Begin
                    Send Error_Report of hoError iErrNum iErrLine sErrMsg
                End
                Else Begin
                    Send Error_Report of Desktop iErrNum iErrLine sErrMsg
                End
            End
            Get pbCancelIfError to bCancelIfError
            If (bCancelIfError) Begin
                Send CancelReport // Sets pbCanceled to true
            End
            Set pbInError to False
        End
    End_Procedure

    #IFDEF IS$WEBAPP
    Function IsTrapped Integer iError Returns Boolean
        Function_Return True
    End_Function
    #ENDIF

    // Enumerates the psDataPath to find the table and returns the path if present.
    { MethodType = Method Visibility = Private }
    Function FindTablePath String sTableName Returns String
        Handle hoWorkspace
        Integer iDataPaths iDataPath
        String sDataPaths sDataPath sTestTableName

        If (ghoApplication > 0) Begin
            Get phoWorkspace of ghoApplication to hoWorkspace
            If (hoWorkspace > 0) Begin
                Get psDataPath of hoWorkspace to sDataPaths
                Get CountOfPaths of hoWorkspace sDataPaths to iDataPaths
                For iDataPath from 1 to iDataPaths
                    Get PathAtIndex of hoWorkspace sDataPaths iDataPath to sDataPath
                    Move (Trim (sDataPath)) to sDataPath
                    If (Right (sDataPath, 1) <> SysConf (SYSCONF_DIR_SEPARATOR)) Begin
                        Move (sDataPath - SysConf (SYSCONF_DIR_SEPARATOR)) to sDataPath
                    End
                    Move (sDataPath - sTableName) to sTestTableName
                    If (DoesFileExist (sTestTableName)) Begin
                        Function_Return sTestTableName
                    End
                Loop
            End
        End

        Function_Return ""
    End_Function

    // Uses optional error information and return it as error message text, then reset the function error information
    // to avoid its information is used again
    { MethodType = Method Visibility = Private }
    Function FormatFunctionErrorMessage Returns String
        String sReportName sFunctionName sErrMsg
        tDRFunctionErrorInfo FunctionErrorInfo FunctionErrorReset

        Get pFunctionErrorInfo to FunctionErrorInfo
        If (FunctionErrorInfo.sReportId <> "") Begin
            Get ComReportName FunctionErrorInfo.sReportId to sReportName
            Get psFunctionName FunctionErrorInfo.sReportId FunctionErrorInfo.iFunctionId to sFunctionName
            If (sFunctionName = "") Begin
                Move C_$DRBuiltInFunction to sFunctionName
            End
            Move (SFormat (C_$DRFunctionError, sFunctionName, sReportName, FunctionErrorInfo.sError)) to sErrMsg
        End

        Function_Return sErrMsg
    End_Function

    #IFDEF IS$WEBAPP
    #ELSE
    { Visibility = Private }
    Procedure Page_Object Boolean bPage
        Handle hWnd
        Boolean bDisplayError bComObjectCreated

        If (bPage) Begin
            Send RedirectErrorsToLocalHandler True
            Get pbDisplayError to bDisplayError
            Set pbDisplayError to False
        End

        Forward Send Page_Object bPage

        If (bPage) Begin
            Set pbDisplayError to bDisplayError
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                If (ghoSkinFramework <> 0) Begin
                    Get Window_Handle to hWnd
                    If (hWnd <> 0) Begin
                        Send ComRemoveWindow of ghoSkinFramework hWnd
                    End
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXCannotLoad, C_DR_OCX_NAME, C_DR_OCX_VERSION))
            End
            Send RedirectErrorsToLocalHandler False
        End
    End_Procedure
    #ENDIF

    { Visibility = Private }
    Function IsDirectory WString wPath Returns Boolean
        Integer iRetVal

        Move (DR_WinAPI_PathIsDirectory (AddressOf (wPath))) to iRetVal

        Function_Return (iRetVal = FILE_ATTRIBUTE_DIRECTORY)
    End_Function

    { Visibility = Private }
    Function ProcessModules Returns String[]
        DWord dwProcessId
        Handle hProcess
        Handle[] hModules
        Integer iSize iVoid iModules iModule iLength
        Boolean bOk
        WString wModuleName
        String[] sModuleNames

        Move (DR_WinAPI_GetCurrentProcessId ()) to dwProcessId
        If (dwProcessId <> 0) Begin
            Move (DR_WinAPI_OpenProcess (PROCESS_VM_READ + PROCESS_QUERY_INFORMATION, False, dwProcessId)) to hProcess
            If (hProcess <> 0) Begin
                Move 0 to iSize
                Move (DR_WinAPI_EnumProcessModules (hProcess, AddressOf (hModules), 0, AddressOf (iSize))) to bOk
                If (not (bOk)) Begin
                    Get ShowLastError to iVoid
                End
                Else Begin
                    Move (iSize / SizeOfType (Handle)) to iModules
                    Move (ResizeArray (hModules, iModules)) to hModules
                    Move (DR_WinAPI_EnumProcessModules (hProcess, AddressOf (hModules), iSize, AddressOf (iSize))) to bOk
                    If (not (bOk)) Begin
                        Get ShowLastError to iVoid
                    End
                    Else Begin
                        Move (ResizeArray (sModuleNames, iModules, Repeat (Character (0), MAX_PATH))) to sModuleNames
                        Decrement iModules
                        For iModule from 0 to iModules
                            Move (Repeat (Character (0), MAX_PATH)) to wModuleName
                            Move (GetModuleFileNameW (hModules[iModule], AddressOf (wModuleName), MAX_PATH)) to iLength
                            Move wModuleName to sModuleNames[iModule]
                        Loop
                    End
                End
                Move (DR_WinAPI_CloseHandle (hProcess)) to bOk
            End
        End

        Function_Return sModuleNames
    End_Function

    // Redirect to local error handler or Restore the global error handler
    { MethodType = Method Visibility = Private }
    Procedure RedirectErrorsToLocalHandler Boolean bRedirect
        Integer iLocalErrorRedirectCount
        String sStackDump

        Get piLocalErrorRedirectCount to iLocalErrorRedirectCount
        If (bRedirect) Begin
            If (iLocalErrorRedirectCount = 0) Begin
                Set phOldErrorObject to Error_Object_Id
                Move Self to Error_Object_Id
            End
            Increment iLocalErrorRedirectCount
            Set piLocalErrorRedirectCount to iLocalErrorRedirectCount
        End
        Else Begin
            If (iLocalErrorRedirectCount = 1) Begin
                Get phOldErrorObject to Error_Object_Id
                Set phOldErrorObject to 0
            End
            Decrement iLocalErrorRedirectCount
            If (iLocalErrorRedirectCount < 0) Begin
                CallStackDump sStackDump
                #IFDEF IS$WEBAPP
                Send ShowInfoBox ("RedirectErrorsToLocalHandler\nThis should not happen!\n\nPlease report to Data Access Europe\n\n" + sStackDump) C_$DRDataFlexReports
                #ELSE
                Send Stop_Box ("RedirectErrorsToLocalHandler\nThis should not happen!\n\nPlease report to Data Access Europe\n\n" + sStackDump) C_$DRDataFlexReports
                #ENDIF
            End
            Set piLocalErrorRedirectCount to iLocalErrorRedirectCount
        End
    End_Procedure

    // ********* PRIVATE EVENTS ***********

    { MethodType = Event Visibility = Private }
    Procedure OnComFunctionError String sReportId Integer iFunctionId String sFunction String sError Integer iLine Integer iCol String sToken
        tDRFunctionErrorInfo FunctionErrorInfo

        Move sReportId to FunctionErrorInfo.sReportId
        Move iFunctionId to FunctionErrorInfo.iFunctionId
        Move sError to FunctionErrorInfo.sError
        Set pFunctionErrorInfo to FunctionErrorInfo
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    { MethodType = Event Visibility = Private }
    Procedure OnComPreviewClick C_DRHitTests iPos Integer iSectionId String sObject String sValue
        Send OnReportPreviewClick iPos iSectionId sObject sValue
    End_Procedure
    #ENDIF

    #IFDEF IS$WEBAPP
    #ELSE
    { MethodType = Event Visibility = Private }
    Procedure OnComPreviewShowPage Integer iPage
        Send OnPageChanged iPage
    End_Procedure
    #ENDIF

    #IFDEF IS$WEBAPP
    #ELSE
    // When the previewer got an instruction to change the zoom factor notify this class
    { MethodType = Event Visibility = Private }
    Procedure OnComPreviewZoomChanged Integer iFactor
        Send OnZoomChanged iFactor
    End_Procedure
    #ENDIF

    { MethodType = Event Visibility = Private }
    Procedure OnComProgressRecordsRead Integer iRecords
        Send OnProgressRecordsRead iRecords
    End_Procedure

    { MethodType = Event Visibility = Private }
    Procedure OnComProgressFormatPage Integer iPage Integer iTotalPages
        Send OnProgressFormatPage iPage iTotalPages
    End_Procedure

    { MethodType = Event Visibility = Private }
    Procedure OnComReportError Integer iError String sError
        Error DFERR_DATAFLEX_REPORTS (SFormat ("%1 (%2)",sError, iError))
    End_Procedure

    { MethodType = Event Visibility = Private }
    Procedure OnComReportInfo Integer iInfo String sInfo
        Send OnReportInfo iInfo sInfo
    End_Procedure

    { MethodType = Event Visibility = Private }
    Procedure OnComReportStatistics C_DRStatistics iType Integer iValue
        Send OnReportStatistics iType iValue
    End_Procedure

    // ********* PUBLIC EVENTS ***********

    #IFDEF IS$WEBAPP
    #ELSE
    // Executed when the previewer object closes
    { MethodType = Event }
    Procedure OnClosePreviewer
    End_Procedure
    #ENDIF

    // Can be used by developer to set filters
    { MethodType = Event }
    Procedure OnDefineFilters
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    // Intended to be used by developer
    { MethodType = Event }
    Procedure OnDisplayReport
    End_Procedure
    #ENDIF

    // Event called by Error_Report. For augmentation.
    { MethodType = Event }
    Procedure OnError Integer iErrNum Integer iErrLine String sErrMsg
    End_Procedure

    // Intended to be used by developer
    { MethodType = Event }
    Procedure OnExportReport C_DRExportFormats iExportType String sFileName
    End_Procedure

    // The developer can use this event to initialize the report object after
    // the report was succesfully opened.
    { MethodType = Event }
    Procedure OnInitializeReport
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    // Will be called if a different page is viewed and automatically send to
    // the preview window.
    { MethodType = Event }
    Procedure OnPageChanged Integer iPage
        Integer ePreviewStyle
        Handle hoPreviewContainer

        Get pePreviewStyle to ePreviewStyle
        If (ePreviewStyle <> C_DRPREVIEW_EMBEDDED) Begin
            Get phoPreviewContainer to hoPreviewContainer
            If (hoPreviewContainer <> 0) Begin
                Send OnPageChanged of hoPreviewContainer iPage
            End
        End
    End_Procedure

    // Will be called at the end of a DisplayReport
    { MethodType = Event }
    Procedure OnPostDisplayReport
    End_Procedure
    #ENDIF

    // Will be called at the end of a ExportReport
    { MethodType = Event }
    Procedure OnPostExportReport Integer iExportType String sFileName
    End_Procedure

    #IFDEF IS$WEBAPP
    // Will be called by ShowReport method of cWebDRReportViewer class after GenerateReportHTML has been called
    { MethodType = Event }
    Procedure OnPostHTMLPreviewData
    End_Procedure
    #ENDIF
    
    // Will be called at the end of a PrintReport
    { MethodType = Event }
    Procedure OnPostPrintReport
    End_Procedure
    
    #IFDEF IS$WEBAPP
    // Will be called by ShowReport method of cWebDRReportViewer class prior to calling GenerateReportHTML
    { MethodType = Event }
    Procedure OnPreHTMLPreviewData
    End_Procedure
    #ENDIF

    // The developer can use this event to change settings on the report object before
    // the report was opened.
    { MethodType = Event }
    Procedure OnPreOpenReport
    End_Procedure

    // Will be called at the begin of a PrintReport method, developer can change
    // the value of the hPrintDlg parameter which contains the address of a PRINTDLGEX structure
    { MethodType = Event }
    Procedure OnPrintReport Handle ByRef hPrintDlg
    End_Procedure

    // Will be fired when the print engine read another 100 records or the time passed a quarter of a second
    { MethodType = Event }
    Procedure OnProgressRecordsRead Integer iRecords
        #IFDEF IS$WEBAPP
        #ELSE
        Handle hoStatusPanel
        Boolean bShowStatusPanel

        Get pbShowStatusPanel to bShowStatusPanel
        Get phoStatusPanel to hoStatusPanel
        If (bShowStatusPanel and hoStatusPanel <> 0) Begin
            Send SetStatusText of hoStatusPanel (SFormat (C_$DRReportRecordsRead, iRecords))
        End
        #ENDIF
    End_Procedure

    // Will be called when the report engine formats a page
    { MethodType = Event }
    Procedure OnProgressFormatPage Integer iPage Integer iTotalPages
        #IFDEF IS$WEBAPP
        #ELSE
        Handle hoStatusPanel
        Boolean bShowStatusPanel

        Get pbShowStatusPanel to bShowStatusPanel
        Get phoStatusPanel to hoStatusPanel
        If (bShowStatusPanel and hoStatusPanel <> 0) Begin
            If (iTotalPages <> -1) Begin
                Send SetStatusText of hoStatusPanel (SFormat (C_$DRReportFormattingPageNofM, iPage, iTotalPages))
            End
            Else Begin
                Send SetStatusText of hoStatusPanel (SFormat (C_$DRReportFormattingPage, iPage))
            End
        End
        #ENDIF
    End_Procedure

    // Can be used to send message from the report engine
    { MethodType = Event }
    Procedure OnReportInfo Integer iError String sInfo
        Boolean bShowInformationMessages

        Get pbShowInformationMessages to bShowInformationMessages
        If (bShowInformationMessages) Begin
        #IFDEF IS$WEBAPP
            Send ShowInfoBox sInfo C_$DRDataFlexReports
        #ELSE
            Send Info_Box sInfo C_$DRDataFlexReports
        #ENDIF
        End
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    // Can be used to make an interactive report
    { MethodType = Event }
    Procedure OnReportPreviewClick C_DRHitTests iPos Integer iSectionId String sObject String sValue
    End_Procedure
    #ENDIF

    // Can be used to collect report statistic information
    { MethodType = Event }
    Procedure OnReportStatistics C_DRStatistics iType Integer iValue
    End_Procedure

    { MethodType = Event }
    Function OnSetPDFExportOptions drPDFExportOptions PDFExportOptions Returns drPDFExportOptions
        Function_Return PDFExportOptions
    End_Function

    #IFDEF IS$WEBAPP
    #ELSE
    // Fires when the preview window is 'paged'
    { MethodType = Event }
    Procedure OnShowPreviewer
    End_Procedure
    #ENDIF

    #IFDEF IS$WEBAPP
    #ELSE
    // Intended to be used by developer
    { MethodType = Event }
    Procedure OnZoomChanged Integer iFactor
        Integer ePreviewStyle
        Handle hoPreviewContainer

        Get pePreviewStyle to ePreviewStyle
        If (ePreviewStyle <> C_DRPREVIEW_EMBEDDED) Begin
            Get phoPreviewContainer to hoPreviewContainer
            If (hoPreviewContainer <> 0) Begin
                Send OnZoomChanged of hoPreviewContainer iFactor
            End
        End
    End_Procedure
    #ENDIF

    // ********* PUBLIC METHODS ***********

    // Adds a filter to the report
    { MethodType = Method }
    Procedure AddFilter String sReportId String sFilterField C_DROperators eFilterOperator String sFilterValue
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                If (eFilterOperator >= C_DRNone and eFilterOperator <= C_DRLessThanOrEqual) Begin
                    Send ComRecordFilterAdd sReportId sFilterField eFilterOperator sFilterValue
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Adds a record sort field to the report
    { MethodType = Method }
    Procedure AddRecordSortField String sReportId String sSortField C_DRSortOrders eSortOrder
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                If (eSortOrder = C_DRAscending or eSortOrder = C_DRDescending) Begin
                    Send ComRecordSortAdd sReportId sSortField eSortOrder
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Cancels the further loading, running
    { MethodType = Method }
    Procedure CancelReport
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Send ComReportCancel sReportId
                Set pbCanceled to True
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    #IFDEF IS$WEBAPP
    { Description = "Checks if the property pFunctionErrorInfo contains a value and displays this via the error handler" }
    { MethodType = Method }
    { Visibility = Private }
    Procedure CheckFunctionErrorInfo
        String sErrMsg
        Integer eMode

        WebGet peMode of ghoWebApp to eMode
        // Testing on desktop as this is where the report can be edited
        If (eMode = rmDesktop) Begin
            Send CheckFunctionErrorAndDisplayInfo of oFunctionErrorDialog Self Self
        End
        Else Begin
            Get FormatFunctionErrorMessage to sErrMsg // Create the errormessage text if the current error was caused by a function error
            If (sErrMsg <> "") Begin
                Error DFERR_DATAFLEX_REPORTS sErrMsg
            End
        End
        Send ResetFunctionErrorInfo
    End_Procedure
    #ELSE
    { Description = "Send a message to a dialog to check if there is a function error and popup the dialog if so" }
    { MethodType = Method }
    { Visibility = Private }
    Procedure CheckFunctionErrorInfo
        Send CheckFunctionErrorAndDisplayInfo of oFunctionErrorDialog Self
        Send ResetFunctionErrorInfo
    End_Procedure
    #ENDIF

    { Description = "Closes the report, set the report ID property to empty to indicate no report is loaded" }
    { MethodType = Method }
    Procedure CloseReport String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                #IFDEF IS$WEBAPP
                #ELSE
                Set PreviewWindowHandle to 0
                #ENDIF
                Send ComReportClose sReportId
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Set psReportId to ""

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Method to enumerate all reports that contain the passed function name. Internal because of the byref usage. It
    // is called from the ReportIdsForFunction function.
    { MethodType = Method Visibility = Private }
    Procedure CollectReportIdsForFunction String sReportId String sFunctionName tReportFunctionId[] ByRef ReportFunctionIds
        Integer iElement iFunction iSubReports iSubReport
        String sSubReportId

        Get FunctionIdByName sReportId sFunctionName to iFunction
        If (iFunction >= 0) Begin
            Move (SizeOfArray (ReportFunctionIds)) to iElement
            Move iFunction to ReportFunctionIds[iElement].iFunction
            Move sReportId to ReportFunctionIds[iElement].sReportId
        End

        Get SubReportCount sReportId to iSubReports
        If (iSubReports > 0) Begin
            Decrement iSubReports
            For iSubReport from 0 to iSubReports
                Get SubReportId sReportId iSubReport to sSubReportId
                Send CollectReportIdsForFunction sSubReportId sFunctionName (&ReportFunctionIds)
            Loop
        End
    End_Procedure

    // Method to enumerate all reports that contain the passed function name. Internal because of the byref usage. It
    // is called from the ReportIdsForParameter function.
    { MethodType = Method Visibility = Private }
    Procedure CollectReportIdsForParameter String sReportId String sParameterName tReportParameterId[] ByRef ReportParameterIds
        Integer iElement iParameter iSubReports iSubReport
        String sSubReportId

        Get ParameterIdByName sReportId sParameterName to iParameter
        If (iParameter >= 0) Begin
            Move (SizeOfArray (ReportParameterIds)) to iElement
            Move iParameter to ReportParameterIds[iElement].iParameter
            Move sReportId to ReportParameterIds[iElement].sReportId
        End

        Get SubReportCount sReportId to iSubReports
        If (iSubReports > 0) Begin
            Decrement iSubReports
            For iSubReport from 0 to iSubReports
                Get SubReportId sReportId iSubReport to sSubReportId
                Send CollectReportIdsForParameter sSubReportId sParameterName (&ReportParameterIds)
            Loop
        End
    End_Procedure

    // Method to enumerate the columns of a reports to find a column reference by name.
    { MethodType = Method }
    Function ColumnNumber String sReportId Integer iTable String sColumnName Returns Integer
        Integer iColumns iColumn
        String sReportColumnName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Move (Uppercase (sColumnName)) to sColumnName
                Get ComColumnCount sReportId iTable to iColumns
                Decrement iColumns
                For iColumn from 0 to iColumns
                    Get ComColumnName sReportId iTable iColumn to sReportColumnName
                    If (Uppercase (sReportColumnName) = sColumnName) Begin
                        Function_Return iColumn
                    End
                Loop
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return -1
    End_Function

    Function ConvertTableDataToJsonSampleData Variant[][] vData Returns UChar[]
        Integer iRows iRow iElements iElement
        tDRDataSourceRow[] TestData
        Handle hoJsonRoot
        UChar[] ucTableData

        Move (SizeOfArray (vData)) to iRows
        If (iRows > 0) Begin
            Move (ResizeArray (TestData, iRows)) to TestData
            Decrement iRows
            For iRow from 0 to iRows
                Move (SizeOfArray (vData[iRow])) to iElements
                If (iElements > 0) Begin
                    Move (ResizeArray (TestData[iRow].sValue, iElements)) to TestData[iRow].sValue
                    Decrement iElements
                    For iElement from 0 to iElements
                        Move vData[iRow][iElement] to TestData[iRow].sValue[iElement+1]
                    Loop
                End
            Loop

            Get Create (RefClass (cJsonObject)) to hoJsonRoot
            Send InitializeJsonType of hoJsonRoot jsonTypeObject
            Send DataTypeToJson of hoJsonRoot TestData
            Set peWhiteSpace Of hoJsonRoot to jpWhitespace_Pretty
            Get StringifyUtf8 of hoJsonRoot to ucTableData
            Send Destroy of hoJsonRoot
        End

        Function_Return ucTableData
    End_Function

    // The return value is C_DRDF, C_DRODBC, C_DRSQLite or C_DRRDS. The function returns zero
    // when no report id has been set, so none has been opened.
    { MethodType = Method }
    Function DatabaseMainType String sReportId Returns C_DRDatabaseTypes
        Integer eDatabaseType eDatabaseMainType
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComDatabaseType sReportId to eDatabaseType
                Move (Low (eDatabaseType)) to eDatabaseMainType
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eDatabaseMainType
    End_Function

    // The return value is C_DRStandard, C_DRSP or C_DRSQL. The function returns zero
    // when no report id has been set, so none has been opened or when the main type is not C_DRODBC or C_DRSQLite.
    { MethodType = Method }
    Function DatabaseSubType String sReportId Returns C_DRDatabaseTypes
        Integer eDatabaseType eDatabaseSubType
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComDatabaseType sReportId to eDatabaseType
                Move (Hi (eDatabaseType)) to eDatabaseSubType
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eDatabaseSubType
    End_Function

    // The return value is C_DRDF, C_DRODBC (as hi/low value), C_DRSQLite (as hi/low value) or C_DRRDS. The function returns zero
    // when no report id has been set, so none has been opened.
    { MethodType = Method }
    Function DatabaseType String sReportId Returns C_DRDatabaseTypes
        Integer eDatabaseType
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComDatabaseType sReportId to eDatabaseType
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eDatabaseType
    End_Function

    // The AddFilter function expects a string. If you move a DateTime to a string the format
    // is incorrect for SQL. With this function we can convert the DateTime to string in the appropriate
    // format (this is yyyy-mm-dd hh:mm:ss)). The prefix zeroes are important.
    { MethodType = Method }
    Function DateTimeToString DateTime dtIn Returns String
        String sDateTimeResult

        Get DateTimeToString of oDRReportHelper dtIn to sDateTimeResult

        Function_Return sDateTimeResult
    End_Function

    // The AddFilter function expects a string. If you move a Date to a string the format
    // is incorrect for SQL. With this function we can convert the Date to string first in the appropriate
    // format (this is yyyy-mm-dd). The prefix zeroes are important.
    { MethodType = Method }
    Function DateToString Date dIn Returns String
        String sDateResult

        Get DateToString of oDRReportHelper dIn to sDateResult

        Function_Return sDateResult
    End_Function

    // Returns defaults for exporting to CSV
    Function DefaultCSVExportOptions Returns DRCSVExportOptions
        DRCSVExportOptions CSVExportOptions

        Move '"' to CSVExportOptions.cFieldSeparator
        Move ',' to CSVExportOptions.cFieldDelimiter
        Move False to CSVExportOptions.bExportGroupSections
        Move False to CSVExportOptions.bExportPageSections
        Move False to CSVExportOptions.bExportReportSections
        Move True to CSVExportOptions.bAllPages
        Move 1 to CSVExportOptions.iPage

        Function_Return CSVExportOptions
    End_Function

    // Returns defaults for exporting to image
    Function DefaultImageExportOptions Returns DRImageExportOptions
        DRImageExportOptions ImageExportOptions

        Move C_DRTIFF to ImageExportOptions.iImageType
        Move True to ImageExportOptions.bMultiPage
        Move 1 to ImageExportOptions.iPage

        Function_Return ImageExportOptions
    End_Function

    // Returns defaults for exporting to HTML
    Function DefaultHTMLExportOptions Returns DRHTMLExportOptions
        DRHTMLExportOptions HTMLExportOptions

        Move True to HTMLExportOptions.bMultiPage
        Move 0 to HTMLExportOptions.iPage

        Function_Return HTMLExportOptions
    End_Function

    // Returns defaults for exporting to PDF
    Function DefaultPDFExportOptions Returns DRPDFExportOptions
        DRPDFExportOptions PDFExportOptions

        Move C_DRNormal to PDFExportOptions.iPageMode
        Move C_drPDFNormal to PDFExportOptions.iPDFType
        Move '' to PDFExportOptions.sOwnerPassword
        Move '' to PDFExportOptions.sUserPassword
        Move C_DRLow to PDFExportOptions.iImageQuality
        Move True to PDFExportOptions.bAllPages
        Move 1 to PDFExportOptions.iPage

        Function_Return PDFExportOptions
    End_Function

    // Returns defaults for exporting to RTF
    Function DefaultRTFExportOptions Returns DRRTFExportOptions
        DRRTFExportOptions RTFExportOptions

        Move True to RTFExportOptions.bAllPages
        Move 1 to RTFExportOptions.iPage

        Function_Return RTFExportOptions
    End_Function

    // Returns defaults for exporting to XLS
    Function DefaultXLSExportOptions Returns DRXLSExportOptions
        DRXLSExportOptions XLSExportOptions

        Move C_DRXLS2007 to XLSExportOptions.iXLSVersion
        Move C_DRNoSheets to XLSExportOptions.iNewSheet
        Move 30 to XLSExportOptions.iColumnWidth
        Move False to XLSExportOptions.bExportDataOnly
        Move True to XLSExportOptions.bExportPageSections
        Move True to XLSExportOptions.bExportReportSections
        Move True to XLSExportOptions.bExportGroupSections
        Move True to XLSExportOptions.bAllPages
        Move False to XLSExportOptions.bExportWithFormatting
        Move 1 to XLSExportOptions.iPage

        Function_Return XLSExportOptions
    End_Function

    #IFDEF IS$WEBAPP
    #ELSE
    // Displays the report
    // Can be sent by developer (and possible augmented) in more advanced situations
    { MethodType = Method }
    Procedure DisplayReport
        Boolean bCancel bComObjectCreated bPreviewContainerIsActive
        Handle hoPreviewContainer hoClientArea hcPreviewer
        Integer ePreviewStyle
        String sReportId sPreviewCaptionLabel

        Send RedirectErrorsToLocalHandler True
        Send CheckFunctionErrorInfo

        Set pbCanceled to False

        Send OnDisplayReport
        Get pbCanceled to bCancel // Developer might have canceled the report
        If (not (bCancel)) Begin
            Get psReportId to sReportId
            If (sReportId = "") Begin
                Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
                Send RedirectErrorsToLocalHandler False
                Procedure_Return
            End

            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get pePreviewStyle to ePreviewStyle
                Case Begin
                    Case (ePreviewStyle = C_DRPREVIEW_MODAL)
                        Get phoPreviewContainer to hoPreviewContainer
                        If (hoPreviewContainer <> 0) Begin
                            Set phoReport of hoPreviewContainer to Self
                            Get psPreviewCaptionLabel to sPreviewCaptionLabel
                            If (sPreviewCaptionLabel = "") Begin
                                Get psReportName to sPreviewCaptionLabel
                            End
                            Set Label of hoPreviewContainer to sPreviewCaptionLabel
                            Send Popup_Modal of hoPreviewContainer
                        End
                        Case Break
                    Case (ePreviewStyle = C_DRPREVIEW_VIEW)
                    Case (ePreviewStyle = C_DRPREVIEW_TOOLPANEL)
                    Case (ePreviewStyle = C_DRPREVIEW_DESKTOPVIEW)
                        Get phoPreviewContainer to hoPreviewContainer
                        If (hoPreviewContainer = 0) Begin
                            Get Client_Id to hoClientArea
                            If (hoClientArea <> 0) Begin
                                Get phcPreviewer to hcPreviewer
                                If (hcPreviewer <> 0) Begin
                                    Get Create of hoClientArea hcPreviewer to hoPreviewContainer
                                    Set phoReport of hoPreviewContainer to Self
                                    Get psPreviewCaptionLabel to sPreviewCaptionLabel
                                    If (sPreviewCaptionLabel = "") Begin
                                        Get psReportName to sPreviewCaptionLabel
                                    End
                                    Set Label of hoPreviewContainer to sPreviewCaptionLabel
                                    Set phoPreviewContainer to hoPreviewContainer
                                End
                            End
                        End
                        If (hoPreviewContainer <> 0) Begin
                            Send DisplayStatusPanel True
                            Get Active_State of hoPreviewContainer to bPreviewContainerIsActive
                            If (not (bPreviewContainerIsActive)) Begin
                                Send Activate_View of hoPreviewContainer
                            End
                            Else Begin
                                Send UpdateViewer of hoPreviewContainer
                                Send Activate of hoPreviewContainer
                            End
                            Send ComReportPreview sReportId
                            Send DisplayStatusPanel False
                        End
                        Case Break
                    Case (ePreviewStyle = C_DRPREVIEW_EMBEDDED)
                        Set phoPreviewContainer to 0
                        Send DisplayStatusPanel True
                        Send ComReportPreview sReportId
                        Send DisplayStatusPanel False
                        Case Break
                Case End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Send OnPostDisplayReport
        Send CheckFunctionErrorInfo

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Is called from OnDisplayReport and Add_Focus in DRModalPreview
    { MethodType = Method }
    Procedure DisplayStatusPanel Boolean bShow
        Boolean bShowStatusPanel bIsActive
        Handle hoStatusPanel

        Get pbShowStatusPanel to bShowStatusPanel
        If (bShowStatusPanel) Begin
            Get phoStatusPanel to hoStatusPanel
            If (hoStatusPanel <> 0) Begin
                If (bShow) Begin
                    Get Active_State of hoStatusPanel to bIsActive
                    If (not (bIsActive)) Begin
                        Send Popup to hoStatusPanel
                    End
                End
                Else Begin
                    Send Deactivate of hoStatusPanel Popup_Type
                End
            End
        End
    End_Procedure
    #ENDIF

    Function ExportFileNamesSet String sExtension Integer iPageNumber Returns String[]
        Integer iPages iPage iElement
        String sCacheFolder sHEXUUID sBaseName
        String[] sFileNames

        Get ReportsCacheFolder to sCacheFolder
        Get RandomHexUUID to sHEXUUID
        Move (sCacheFolder + sHEXUUID) to sBaseName

        Get ReportPageCount to iPages
        If (iPageNumber > 0 and iPageNumber < iPages) Begin
            Move (Sformat ("%1-Page%2.%3", sBaseName, iPageNumber, sExtension)) to sFileNames[iElement]
        End
        Else Begin
            For iPage from 1 to iPages
                Move (Sformat ("%1-Page%2.%3", sBaseName, iPage, sExtension)) to sFileNames[iElement]
                Increment iElement
            Loop
        End

        Function_Return sFileNames
    End_Function

    // Export the report
    // Can be sent by developer (and possible augmented) in more advanced situations
    { MethodType = Method }
    Procedure ExportReport C_DRExportFormats iExportType String sFileName
        Boolean bCancel bComObjectCreated
        String sReportId

        Send RedirectErrorsToLocalHandler True
        Send CheckFunctionErrorInfo

        Set pbCanceled to False

        Send OnExportReport iExportType sFileName
        Get pbCanceled to bCancel // Developer might have canceled the report
        If (not (bCancel)) Begin
            Get psReportId to sReportId
            If (sReportId = "") Begin
                Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
                Send RedirectErrorsToLocalHandler False
                Procedure_Return
            End

            If (sFileName = "") Begin
                Error DFERR_DATAFLEX_REPORTS C_$DRNoExportFileNameSpecified
                Send RedirectErrorsToLocalHandler False
                Procedure_Return
            End

            If (iExportType <> C_DRImage and iExportType <> C_DRPDF and iExportType <> C_DRCSV and iExportType <> C_DRHTML and iExportType <> C_DRXLS and iExportType <> C_DRRTF) Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRNoValidExportTypeSpecified, iExportType))
                Send RedirectErrorsToLocalHandler False
                Procedure_Return
            End

            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                #IFDEF IS$WEBAPP
                #ELSE
                Send DisplayStatusPanel True
                #ENDIF
                Send ComReportExport sReportId iExportType sFileName
                #IFDEF IS$WEBAPP
                #ELSE
                Send DisplayStatusPanel False
                #ENDIF
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Send OnPostExportReport iExportType sFileName
        Send CheckFunctionErrorInfo

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    #IFDEF IS$WEBAPP
    Procedure ExportReportToDownloadURL tNameValuePair[] NamedValues
        String sReportId sUrl sExportFormat sFileNameWithoutPath
        String[] sFileNames
        Boolean bAllPages
        DRPDFExportOptions PDFExportOptions
        DRImageExportOptions ImageExportOptions
        drXLSExportOptions XLSExportOptions
        drRTFExportOptions RTFExportOptions
        drCSVExportOptions CSVExportOptions
        drHTMLExportOptions HTMLExportOptions
        Integer eType iPageElements iPageElement iPage eDestination iIndex
        Boolean bCanceled

        Get OpenReport to sReportId
        If (sReportId <> "") Begin
            Get NamedValueGet NamedValues "ExportFormat" to sExportFormat
            Get NamedValueGet NamedValues "AllPages" to bAllPages

            Case Begin
                Case (sExportFormat = "HTML")
                    Get DefaultHTMLExportOptions to HTMLExportOptions
                    Move False to HTMLExportOptions.bMultiPage
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to HTMLExportOptions.iPage
                        End
                        Get ReportCacheFileName ".html" to sFileNames[0]
                        Set pHTMLExportOptions to HTMLExportOptions
                    End
                    Else Begin
                        Get ExportFileNamesSet "html" -1 to sFileNames
                    End
                    Move C_drHTML to eType
                    Case Break
                Case (sExportFormat = "TIFF")
                    Get DefaultImageExportOptions to ImageExportOptions
                    Move C_drTIFF to ImageExportOptions.iImageType
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to ImageExportOptions.iPage
                        End
                        Get ExportFileNamesSet "tiff" ImageExportOptions.iPage to sFileNames
                        Move False to ImageExportOptions.bMultiPage
                        Set pImageExportOptions to ImageExportOptions
                    End
                    Else Begin
                        Get ReportCacheFileName ".tiff" to sFileNames[0]
                    End
                    Move C_drImage to eType
                    Case Break
                Case (sExportFormat = "GIF")
                    Get DefaultImageExportOptions to ImageExportOptions
                    Move False to ImageExportOptions.bMultiPage
                    Move C_drGIF to ImageExportOptions.iImageType
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to ImageExportOptions.iPage
                        End
                        Get ExportFileNamesSet "gif" ImageExportOptions.iPage to sFileNames
                        Set pImageExportOptions to ImageExportOptions
                    End
                    Else Begin
                        Get ExportFileNamesSet "gif" -1 to sFileNames
                    End
                    Move C_drImage to eType
                    Case Break
                Case (sExportFormat = "PNG")
                    Get DefaultImageExportOptions to ImageExportOptions
                    Move False to ImageExportOptions.bMultiPage
                    Move C_drPNG to ImageExportOptions.iImageType
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to ImageExportOptions.iPage
                        End
                        Get ExportFileNamesSet "png" ImageExportOptions.iPage to sFileNames
                        Set pImageExportOptions to ImageExportOptions
                    End
                    Else Begin
                        Get ExportFileNamesSet "png" -1 to sFileNames
                    End
                    Move C_drImage to eType
                    Case Break
                Case (sExportFormat = "JPEG")
                    Get DefaultImageExportOptions to ImageExportOptions
                    Move False to ImageExportOptions.bMultiPage
                    Move C_drJPEG to ImageExportOptions.iImageType
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to ImageExportOptions.iPage
                        End
                        Get ExportFileNamesSet "jpg" ImageExportOptions.iPage to sFileNames
                        Set pImageExportOptions to ImageExportOptions
                    End
                    Else Begin
                        Get ExportFileNamesSet "jpg" -1 to sFileNames
                    End
                    Move C_drImage to eType
                    Case Break
                Case (sExportFormat = "PDF")
                    Get DefaultPDFExportOptions to PDFExportOptions
                    Get NamedValueIndex NamedValues "OwnerPassword" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to PDFExportOptions.sOwnerPassword
                    End
                    Get NamedValueIndex NamedValues "UserPassword" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to PDFExportOptions.sUserPassword
                    End
                    Get NamedValueIndex NamedValues "PageMode" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to PDFExportOptions.iPageMode
                    End
                    Get NamedValueIndex NamedValues "ImageQuality" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to PDFExportOptions.iImageQuality
                    End
                    Get NamedValueIndex NamedValues "PDFType" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to PDFExportOptions.iPDFType
                    End
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to PDFExportOptions.iPage
                        End
                        Get ExportFileNamesSet "pdf" PDFExportOptions.iPage to sFileNames
                        Move False to PDFExportOptions.bAllPages
                    End
                    Else Begin
                        Get ReportCacheFileName ".pdf" to sFileNames[0]
                    End
                    Set pPDFExportOptions to PDFExportOptions
                    Move C_drPDF to eType
                    Case Break
                Case (sExportFormat = "CSV")
                    Get DefaultCSVExportOptions to CSVExportOptions
                    Get NamedValueIndex NamedValues "ExportGroupSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to CSVExportOptions.bExportGroupSections
                    End
                    Get NamedValueIndex NamedValues "ExportPageSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to CSVExportOptions.bExportPageSections
                    End
                    Get NamedValueIndex NamedValues "ExportReportSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to CSVExportOptions.bExportReportSections
                    End
                    Get NamedValueIndex NamedValues "FieldSeparator" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to CSVExportOptions.cFieldSeparator
                    End
                    Get NamedValueIndex NamedValues "FieldDelimiter" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to CSVExportOptions.cFieldDelimiter
                    End
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to CSVExportOptions.iPage
                        End
                        Move False to CSVExportOptions.bAllPages
                        Get ExportFileNamesSet "csv" CSVExportOptions.iPage to sFileNames
                    End
                    Else Begin
                        Get ReportCacheFileName ".csv" to sFileNames[0]
                    End
                    Set pCSVExportOptions to CSVExportOptions
                    Move C_drCSV to eType
                    Case Break
                Case (sExportFormat = "XLSX")
                    Get DefaultXLSExportOptions to XLSExportOptions
                    Get NamedValueIndex NamedValues "ExportGroupSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportGroupSections
                    End
                    Get NamedValueIndex NamedValues "ExportPageSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportPageSections
                    End
                    Get NamedValueIndex NamedValues "ExportReportSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportReportSections
                    End
                    Get NamedValueIndex NamedValues "DataOnly" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportDataOnly
                    End
                    Get NamedValueIndex NamedValues "ColumnWidth" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.iColumnWidth
                    End
                    Get NamedValueIndex NamedValues "NewSheets" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.iNewSheet
                    End
                    Get NamedValueIndex NamedValues "ExportWithFormatting" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportWithFormatting
                    End
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to XLSExportOptions.iPage
                        End
                        Get ExportFileNamesSet "xlsx" XLSExportOptions.iPage to sFileNames
                        Move False to XLSExportOptions.bAllPages
                    End
                    Else Begin
                        Get ReportCacheFileName ".xlsx" to sFileNames[0]
                    End
                    Set pXLSExportOptions to XLSExportOptions
                    Move C_drXLS to eType
                    Case Break
                Case (sExportFormat = "XLS")
                    Get DefaultXLSExportOptions to XLSExportOptions
                    Get NamedValueIndex NamedValues "ExportGroupSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportGroupSections
                    End
                    Get NamedValueIndex NamedValues "ExportPageSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportPageSections
                    End
                    Get NamedValueIndex NamedValues "ExportReportSections" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportReportSections
                    End
                    Get NamedValueIndex NamedValues "DataOnly" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportDataOnly
                    End
                    Get NamedValueIndex NamedValues "ColumnWidth" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.iColumnWidth
                    End
                    Get NamedValueIndex NamedValues "NewSheets" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.iNewSheet
                    End
                    Get NamedValueIndex NamedValues "ExportWithFormatting" to iIndex
                    If (iIndex > -1) Begin
                        Move NamedValues[iIndex].sValue to XLSExportOptions.bExportWithFormatting
                    End
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to XLSExportOptions.iPage
                        End
                        Get ExportFileNamesSet "xls" XLSExportOptions.iPage to sFileNames
                        Move False to XLSExportOptions.bAllPages
                    End
                    Else Begin
                        Get ReportCacheFileName ".xls" to sFileNames[0]
                    End
                    Move C_drXLS2003 to XLSExportOptions.iXLSVersion
                    Set pXLSExportOptions to XLSExportOptions
                    Move C_drXLS to eType
                    Case Break
                Case (sExportFormat = "RTF")
                    Get DefaultRTFExportOptions to RTFExportOptions
                    If (not (bAllPages)) Begin
                        Get NamedValueIndex NamedValues "PageNumber" to iIndex
                        If (iIndex > -1) Begin
                            Move NamedValues[iIndex].sValue to RTFExportOptions.iPage
                        End
                        Get ExportFileNamesSet "rtf" RTFExportOptions.iPage to sFileNames
                        Move False to RTFExportOptions.bAllPages
                        Set pRTFExportOptions to RTFExportOptions
                    End
                    Else Begin
                        Get ReportCacheFileName ".rtf" to sFileNames[0]
                    End
                    Move C_drRTF to eType
                    Case Break
            Case End

            Get NamedValueIndex NamedValues "Destination" to iIndex
            If (iIndex > -1) Begin
                Move NamedValues[iIndex].sValue to eDestination
            End

            If (not (bAllPages)) Begin
                Send ExportReport eType sFileNames[0]
                Get pbCanceled to bCanceled
                If (bCanceled) ;
                    Break
                If (DoesFileExist (sFileNames[0])) Begin
                    Get DRPathFindFileName sFileNames[0] to sFileNameWithoutPath
                    Get CustomDownloadURL of ghoWebResourceManager sFileNames[0] False sFileNameWithoutPath True 0 to sUrl
                    If (sUrl <> "") Begin
                        Send NavigateToPage sUrl eDestination
                    End
                End
                Else Begin
                    Error DFERR_FILE_NOT_FOUND sFileNames[0]
                End
            End
            Else Begin
                Move (SizeOfArray (sFileNames)) to iPageElements
                If (iPageElements > 0) Begin
                    Decrement iPageElements
                    For iPageElement from 0 to iPageElements
                        Increment iPage
                        Case Begin
                            Case (eType = C_drImage)
                                Move iPage to ImageExportOptions.iPage
                                Set pImageExportOptions to ImageExportOptions
                                Case Break
                            Case (eType = C_drHTML)
                                Move iPage to HTMLExportOptions.iPage
                                Set pHTMLExportOptions to HTMLExportOptions
                                Case Break
                            Case (eType = C_drRTF)
                                Move iPage to RTFExportOptions.iPage
                                Set pRTFExportOptions to RTFExportOptions
                                Case Break
                        Case End
                        Send ExportReport eType sFileNames[iPageElement]
                        Get pbCanceled to bCanceled
                        If (bCanceled) ;
                            Break
                        If (DoesFileExist (sFileNames[iPageElement])) Begin
                            Get DownloadURL of ghoWebResourceManager sFileNames[iPageElement] to sUrl
                            If (sUrl <> "") Begin
                                Send NavigateToPage sUrl eDestination
                            End
                        End
                        Else Begin
                            Error DFERR_FILE_NOT_FOUND sFileNames[iPageElement]
                        End
                    Loop
                End
            End

            Send CloseReport sReportId
        End
    End_Procedure
    #ENDIF

    // Replace a sub-report in the loaded report with the contents of the report definition stored in the
    // sFileName parameter. With a return value -3, -4 or -5 the report needs to be closed and re-opened.
    { MethodType = Method }
    Function ImportSubReport String sReportId String sSubReportId String sFileName Returns Integer
        Boolean bComObjectCreated bExists
        Integer eResult

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                File_Exist sFileName bExists
                If (bExists) Begin
                    Get ComSubreportImport sReportId sSubReportId sFileName to eResult
                    Case Begin
                        Case (eResult = C_DR_SUBREPORT_IMPORT_SUBREPORT_NOT_FOUND)
                            Error DFERR_DATAFLEX_REPORTS C_$DRSubReportImportSubReportNotFound
                            Case Break
                        Case (eResult = C_DR_SUBREPORT_IMPORT_CANNOT_PREPARE_SUBREPORT)
                            Error DFERR_DATAFLEX_REPORTS C_$DRSubReportImportCannotPrepareSubReport
                            Case Break
                        Case (eResult = C_DR_SUBREPORT_IMPORT_CANNOT_OPEN_FILE)
                            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRSubReportImportCannotOpenFile, sFileName))
                            Case Break
                        Case (eResult = C_DR_SUBREPORT_IMPORT_MAINREPORT_NOT_FOUND)
                            Error DFERR_DATAFLEX_REPORTS C_$DRSubReportImportMainReportNotFound
                            Case Break
                        Case (eResult = C_DR_SUBREPORT_IMPORT_BUSY)
                            Error DFERR_DATAFLEX_REPORTS C_$DRSubReportImportBusyStatus
                            Case Break
                        Case (eResult = C_DR_SUBREPORT_IMPORT_SUCCESS)
                            // All OK, nothing to do
                            Case Break
                    Case End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRSubReportImportFileNotFound, sFileName))
                    Move C_DR_SUBREPORT_IMPORT_CANNOT_OPEN_FILE to eResult
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eResult
    End_Function

    // Returns the number of filters defined in the report
    { MethodType = Method }
    Function FilterCount String sReportId Returns Integer
        Integer iFilters
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId to iFilters
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iFilters
    End_Function

    // Functionality is the same as in FilterCount when the report does not contain sub-reports
    // If the report contains sub-reports these are consulted to find out if there are filters
    // defined there.
    { MethodType = Method }
    Function FiltersDefined String sReportId Returns Boolean
        Integer iFilters iSubReports iSubReport
        String sSubReportId
        Boolean bFiltersDefined

        Get FilterCount sReportId to iFilters
        If (iFilters > 0) Begin
            Move True to bFiltersDefined
        End
        Else Begin
            Get SubReportCount sReportId to iSubReports
            Decrement iSubReports
            For iSubReport from 0 to iSubReports
                Get SubReportId sReportId iSubReport to sSubReportId
                Get FiltersDefined sSubReportId to bFiltersDefined
                If (bFiltersDefined) ;
                    Break
            Loop
        End

        Function_Return bFiltersDefined
    End_Function

    // Returns a text string which contains information about the filters defined in the report
    { MethodType = Method }
    Function FilterInformation String sReportId Returns String
        Integer iFilters iFilter eFilterOperator
        String sFilterField sFilterValue sInfo

        Get FilterCount sReportId to iFilters
        If (iFilters > 0) Begin
            Decrement iFilters
            For iFilter from 0 to iFilters
                Get psFilterField sReportId iFilter to sFilterField
                Move (Mid (sFilterField, Length(sFilterField) - 2, 2)) to sFilterField
                If (sInfo <> '') Begin
                    Move (sInfo + "+Chr(10)+") to sInfo
                End
                Get peFilterOperator sReportId iFilter to eFilterOperator
                Get psFilterValue sReportId iFilter to sFilterValue
                Move (sInfo + Sformat ("'%1 %2 %3'", sFilterField, Mid ("= <>> >=< <=", 2, eFilterOperator - 1 * 2 + 1), sFilterValue)) to sInfo
            Loop
        End

        Function_Return sInfo
    End_Function

    // Returns the number of functions defined in the report
    { MethodType = Method }
    Function FunctionCount String sReportId Returns Integer
        Integer iFunctions
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFunctionCount sReportId to iFunctions
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iFunctions
    End_Function

    // Returns the function ID based on the passed functionname. The test is case insensitive.
    // Returns less than 0 when no function with the passed name can be found
    { MethodType = Method }
    Function FunctionIdByName String sReportId String sFunctionName Returns Integer
        Integer iFunctionId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFunctionByName sReportId sFunctionName to iFunctionId
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iFunctionId
    End_Function

    // Returns the length of the contents of a function in the report
    { MethodType = Method }
    Function FunctionLength String sFunction Integer iFunction Returns Integer
        Integer iFunctionLength
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFunctionLength sReportId sFunction iFunction to iFunctionLength
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iFunctionLength
    End_Function

    // Returns the data type of the contents of a function in the report
    { MethodType = Method }
    Function FunctionType String sFunction Integer iIndex Returns Integer
        Integer iFunctionType
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFunctionType sReportId sFunction iIndex to iFunctionType
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iFunctionType
    End_Function

    #IFDEF IS$WEBAPP
    Function GenerateDownloadLinks Returns String[]
        String sReportId
        String[] sFileNames
        DRImageExportOptions ImageExportOptions
        Integer iElements iElement iPage
        Integer eImageType

        Get OpenReport to sReportId
        If (sReportId <> "") Begin
            Get peImageType to eImageType

            Case Begin
                Case (eImageType = C_drJPEG)
                    Move C_DRJPEG to ImageExportOptions.iImageType
                    Get ExportFileNamesSet 'jpeg' -1 to sFileNames
                    Case Break
                Case (eImageType = C_drGIF)
                    Move C_DRGIF to ImageExportOptions.iImageType
                    Get ExportFileNamesSet 'gif' -1 to sFileNames
                    Case Break
                Case (eImageType = C_drPNG)
                    Move C_DRPNG to ImageExportOptions.iImageType
                    Get ExportFileNamesSet 'png' -1 to sFileNames
                    Case Break
            Case End

            Move False to ImageExportOptions.bMultiPage

            Move (SizeOfArray (sFileNames)) to iElements
            Decrement iElements

            For iElement from 0 to iElements
                Increment iPage
                Move iPage to ImageExportOptions.iPage
                Set pImageExportOptions to ImageExportOptions
                Send ExportReport C_DRImage sFileNames[iElement]
                Get DownloadURL of ghoWebResourceManager sFileNames[iElement] to sFileNames[iElement]
            Loop

            Send CloseReport sReportId
        End

        Function_Return sFileNames
    End_Function
    #ENDIF

    // this function exports the report to PDF with default options and returns the generated filename for
    // further processing
    Function GenerateReport Returns String
        String sReportId sFile
        DRPDFExportOptions PDFExportOptions
        Boolean bCanceled

        Get OpenReport to sReportId
        If (sReportId <> "") Begin
            Get DefaultPDFExportOptions to PDFExportOptions
            Get OnSetPDFExportOptions PDFExportOptions to PDFExportOptions
            Set pPDFExportOptions to PDFExportOptions
            Get ReportCacheFileName ".pdf" to sFile
            If (sFile <> "") Begin
                Send ExportReport C_DRPDF sFile
            End

            // see if report ran ok, if not return empty path
            Get pbCanceled to bCanceled
            If bCanceled Begin
                Move "" to sFile
            End

            Send CloseReport sReportId
        End

        Function_Return sFile
    End_Function

    #IFDEF IS$WEBAPP
    // this method exports the report to PDF with default options and generates a download URL which is either
    // displayed in a previewer object (typically a cWebIFrame) or send to the browser for download
    Procedure GenerateReport
        String sFile sUrl
        Handle hoReportViewer
        Integer eBrowserTarget

        Get GenerateReport to sFile
        If (DoesFileExist (sFile)) Begin
            Get DownloadURL of ghoWebResourceManager sFile to sUrl
            If (sUrl <> "") Begin
                Get phoReportViewer to hoReportViewer
                If (hoReportViewer <> 0) Begin
                    WebSet psUrl of hoReportViewer to sUrl
                End
                Else Begin
                    Get peBrowserTarget to eBrowserTarget
                    Send NavigateToPage sUrl eBrowserTarget
                End
            End
        End
        Else Begin
            Error DFERR_FILE_NOT_FOUND sFile
        End
    End_Procedure

    Function GenerateReportHTML Returns String[][]
        String sReportId
        String[][] sData
        Integer iArgSize

        Get OpenReport to sReportId
        If (sReportId <> "") Begin
            Get_Argument_Size to iArgSize
            Get HTMLPreviewData sReportId (iArgSize / 4) to sData
            Send CloseReport sReportId
        End

        Function_Return sData
    End_Function
    #ENDIF

    { Visibility = Private }
    Function HTMLExportOptionsCorrect DRHTMLExportOptions HTMLExportOptionsData Returns Boolean
        Integer iPageCount

        If (not (HTMLExportOptionsData.bMultiPage)) Begin
            Get ReportPageCount to iPageCount
            If (HTMLExportOptionsData.iPage < 1 or HTMLExportOptionsData.iPage > iPageCount) Begin
                Error DFERR_DATAFLEX_REPORTS C_$DRHTMLExportInvalidPageNumber
                Function_Return False
            End
        End

        Function_Return True
    End_Function

    #IFDEF IS$WEBAPP
    // This function will return an array of strings with pages of information.
    // Note: The value of iBlockSize is used to avoid the string to become larger than the DataFlex argument size
    { MethodType = Method }
    Function HTMLPreviewData String sReportId Integer iBlockSize Returns String[][]
        Boolean bComObjectCreated
        Integer iPages iPage
        String[] sPageData
        String[][] sData

        Send RedirectErrorsToLocalHandler True
        Send CheckFunctionErrorInfo

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Send ComReportRefresh sReportId
                Get ComReportPageCount sReportId to iPages
                For iPage from 1 to iPages
                    Get ComReportHTMLPreview sReportId iBlockSize iPage False to sPageData
                    Move sPageData to sData[SizeOfArray (sData)]
                Loop
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send CheckFunctionErrorInfo
        Send RedirectErrorsToLocalHandler False

        Function_Return sData
    End_Function
    #ENDIF

    // This routine initialises the export options and passes them as blank to the report engine
    // in case developers forget to set the value
    { MethodType = Method Visibility = Private }
    Procedure InitExportStructures
        DRPDFExportOptions PDFExportOptions
        DRCSVExportOptions CSVExportOptions
        DRImageExportOptions ImageExportOptions
        DRXLSExportOptions XLSExportOptions
        DRHTMLExportOptions HTMLExportOptions
        DRRTFExportOptions RTFExportOptions

        Get DefaultPDFExportOptions to PDFExportOptions
        Get DefaultCSVExportOptions to CSVExportOptions
        Get DefaultImageExportOptions to ImageExportOptions
        Get DefaultXLSExportOptions to XLSExportOptions
        Get DefaultHTMLExportOptions to HTMLExportOptions
        Get DefaultRTFExportOptions to RTFExportOptions

        Set pPDFExportOptions to PDFExportOptions
        Set pCSVExportOptions to CSVExportOptions
        Set pImageExportOptions to ImageExportOptions
        Set pXLSExportOptions to XLSExportOptions
        Set pHTMLExportOptions to HTMLExportOptions
        Set pRTFExportOptions to RTFExportOptions
    End_Procedure

    // This method will be called during the auto relocation of tables in the report
    // The default behaviour of this function is to return true when the extension
    // of the filename is equal to .cfg.
    // When you used a filelist that does not end on .cfg you need to override
    // this method and return true.
    { MethodType = Method }
    Function IsFileList String sFileName Returns Boolean
        If (Lowercase (Right (sFileName, 4)) = ".cfg") Begin
            Function_Return True
        End

        Function_Return False
    End_Function

    { MethodType = Method Visibility = Private }
    Function LanguageName Integer iLanguage Returns String
        String sLanguage

        Case Begin
            Case (iLanguage = LANG_NEUTRAL)
                Move "Default" to sLanguage
                Case Break
            Case (iLanguage = LANG_AFRIKAANS)
                Move "Afrikaans" to sLanguage
                Case Break
            Case (iLanguage = LANG_ALBANIAN)
                Move "Albanian" to sLanguage
                Case Break
            Case (iLanguage = LANG_ARABIC)
                Move "Arabic" to sLanguage
                Case Break
            Case (iLanguage = LANG_ARMENIAN)
                Move "Armenian" to sLanguage
                Case Break
            Case (iLanguage = LANG_ASSAMESE)
                Move "Assamese" to sLanguage
                Case Break
            Case (iLanguage = LANG_AZERI)
                Move "Azeri" to sLanguage
                Case Break
            Case (iLanguage = LANG_BASQUE)
                Move "Basque" to sLanguage
                Case Break
            Case (iLanguage = LANG_BELARUSIAN)
                Move "Belarusian" to sLanguage
                Case Break
            Case (iLanguage = LANG_BENGALI)
                Move "Bengali" to sLanguage
                Case Break
            Case (iLanguage = LANG_BULGARIAN)
                Move "Bulgarian" to sLanguage
                Case Break
            Case (iLanguage = LANG_CATALAN)
                Move "Catalan" to sLanguage
                Case Break
            Case (iLanguage = LANG_CHINESE)
                Move "Chinese" to sLanguage
                Case Break
            Case (iLanguage = LANG_CROATIAN)
                Move "Croatian" to sLanguage
                Case Break
            Case (iLanguage = LANG_CZECH)
                Move "Czech" to sLanguage
                Case Break
            Case (iLanguage = LANG_DANISH)
                Move "Danish" to sLanguage
                Case Break
            Case (iLanguage = LANG_DIVEHI)
                Move "Divehi" to sLanguage
                Case Break
            Case (iLanguage = LANG_DUTCH)
                Move "Dutch" to sLanguage
                Case Break
            Case (iLanguage = LANG_ENGLISH)
                Move "English" to sLanguage
                Case Break
            Case (iLanguage = LANG_ESTONIAN)
                Move "Estonian" to sLanguage
                Case Break
            Case (iLanguage = LANG_FAEROESE)
                Move "Faeroese" to sLanguage
                Case Break
            Case (iLanguage = LANG_FARSI)
                Move "Farsi" to sLanguage
                Case Break
            Case (iLanguage = LANG_FINNISH)
                Move "Finnish" to sLanguage
                Case Break
            Case (iLanguage = LANG_FRENCH)
                Move "French" to sLanguage
                Case Break
            Case (iLanguage = LANG_GALICIAN)
                Move "Galician" to sLanguage
                Case Break
            Case (iLanguage = LANG_GEORGIAN)
                Move "Georgian" to sLanguage
                Case Break
            Case (iLanguage = LANG_GERMAN)
                Move "German" to sLanguage
                Case Break
            Case (iLanguage = LANG_GREEK)
                Move "Greek" to sLanguage
                Case Break
            Case (iLanguage = LANG_GUJARATI)
                Move "Gujarati" to sLanguage
                Case Break
            Case (iLanguage = LANG_HEBREW)
                Move "Hebrew" to sLanguage
                Case Break
            Case (iLanguage = LANG_HINDI)
                Move "Hindi" to sLanguage
                Case Break
            Case (iLanguage = LANG_HUNGARIAN)
                Move "Hungarian" to sLanguage
                Case Break
            Case (iLanguage = LANG_ICELANDIC)
                Move "Icelandic" to sLanguage
                Case Break
            Case (iLanguage = LANG_INDONESIAN)
                Move "Indonesian" to sLanguage
                Case Break
            Case (iLanguage = LANG_ITALIAN)
                Move "Italian" to sLanguage
                Case Break
            Case (iLanguage = LANG_JAPANESE)
                Move "Japanese" to sLanguage
                Case Break
            Case (iLanguage = LANG_KANNADA)
                Move "Kannada" to sLanguage
                Case Break
            Case (iLanguage = LANG_KASHMIRI)
                Move "Kashmiri" to sLanguage
                Case Break
            Case (iLanguage = LANG_KAZAK)
                Move "Kazak" to sLanguage
                Case Break
            Case (iLanguage = LANG_KONKANI)
                Move "Konkani" to sLanguage
                Case Break
            Case (iLanguage = LANG_KOREAN)
                Move "Korean" to sLanguage
                Case Break
            Case (iLanguage = LANG_KYRGYZ)
                Move "Kyrgyz" to sLanguage
                Case Break
            Case (iLanguage = LANG_LATVIAN)
                Move "Latvian" to sLanguage
                Case Break
            Case (iLanguage = LANG_LITHUANIAN)
                Move "Lithuanian" to sLanguage
                Case Break
            Case (iLanguage = LANG_MACEDONIAN)
                Move "Macedonian" to sLanguage
                Case Break
            Case (iLanguage = LANG_MALAY)
                Move "Malay" to sLanguage
                Case Break
            Case (iLanguage = LANG_MALAYALAM)
                Move "Malayalam" to sLanguage
                Case Break
            Case (iLanguage = LANG_MANIPURI)
                Move "Manipuri" to sLanguage
                Case Break
            Case (iLanguage = LANG_MARATHI)
                Move "Marathi" to sLanguage
                Case Break
            Case (iLanguage = LANG_MONGOLIAN)
                Move "Mongolian" to sLanguage
                Case Break
            Case (iLanguage = LANG_NEPALI)
                Move "Nepali" to sLanguage
                Case Break
            Case (iLanguage = LANG_NORWEGIAN)
                Move "Norwegian" to sLanguage
                Case Break
            Case (iLanguage = LANG_ORIYA)
                Move "Oriya" to sLanguage
                Case Break
            Case (iLanguage = LANG_POLISH)
                Move "Polish" to sLanguage
                Case Break
            Case (iLanguage = LANG_PORTUGUESE)
                Move "Portuguese" to sLanguage
                Case Break
            Case (iLanguage = LANG_PUNJABI)
                Move "Punjabi" to sLanguage
                Case Break
            Case (iLanguage = LANG_ROMANIAN)
                Move "Romanian" to sLanguage
                Case Break
            Case (iLanguage = LANG_RUSSIAN)
                Move "Russian" to sLanguage
                Case Break
            Case (iLanguage = LANG_SANSKRIT)
                Move "Sanskrit" to sLanguage
                Case Break
            Case (iLanguage = LANG_SERBIAN)
                Move "Serbian" to sLanguage
                Case Break
            Case (iLanguage = LANG_SINDHI)
                Move "Sindhi" to sLanguage
                Case Break
            Case (iLanguage = LANG_SLOVAK)
                Move "Slovak" to sLanguage
                Case Break
            Case (iLanguage = LANG_SLOVENIAN)
                Move "Slovenian" to sLanguage
                Case Break
            Case (iLanguage = LANG_SPANISH)
                Move "Spanish" to sLanguage
                Case Break
            Case (iLanguage = LANG_SWAHILI)
                Move "Swahili" to sLanguage
                Case Break
            Case (iLanguage = LANG_SWEDISH)
                Move "Swedish" to sLanguage
                Case Break
            Case (iLanguage = LANG_SYRIAC)
                Move "Syriac" to sLanguage
                Case Break
            Case (iLanguage = LANG_TAMIL)
                Move "Tamil" to sLanguage
                Case Break
            Case (iLanguage = LANG_TATAR)
                Move "Tatar" to sLanguage
                Case Break
            Case (iLanguage = LANG_TELUGU)
                Move "Telugu" to sLanguage
                Case Break
            Case (iLanguage = LANG_THAI)
                Move "Thai" to sLanguage
                Case Break
            Case (iLanguage = LANG_TURKISH)
                Move "Turkish" to sLanguage
                Case Break
            Case (iLanguage = LANG_UKRAINIAN)
                Move "Ukrainian" to sLanguage
                Case Break
            Case (iLanguage = LANG_URDU)
                Move "Urdu" to sLanguage
                Case Break
            Case (iLanguage = LANG_UZBEK)
                Move "Uzbek" to sLanguage
                Case Break
            Case (iLanguage = LANG_VIETNAMESE)
                Move "Vietnamese" to sLanguage
                Case Break
            Case Else
                Move "Unknown" to sLanguage
                Case Break
        Case End

        Function_Return sLanguage
    End_Function

    { MethodType = Method Visibility = Private }
    Function LanguageNumber String sLanguage Returns Integer
        Integer iLanguage

        Case Begin
            Case (sLanguage = "Default")
                Move LANG_NEUTRAL to iLanguage
                Case Break
            Case (sLanguage = "Afrikaans")
                Move LANG_AFRIKAANS to iLanguage
                Case Break
            Case (sLanguage = "Albanian")
                Move LANG_ALBANIAN to iLanguage
                Case Break
            Case (sLanguage = "Arabic")
                Move LANG_ARABIC to iLanguage
                Case Break
            Case (sLanguage = "Armenian")
                Move LANG_ARMENIAN to iLanguage
                Case Break
            Case (sLanguage = "Assamese")
                Move LANG_ASSAMESE to iLanguage
                Case Break
            Case (sLanguage = "Azeri")
                Move LANG_AZERI to iLanguage
                Case Break
            Case (sLanguage = "Basque")
                Move LANG_BASQUE to iLanguage
                Case Break
            Case (sLanguage = "Belarusian")
                Move LANG_BELARUSIAN to iLanguage
                Case Break
            Case (sLanguage = "Bengali")
                Move LANG_BENGALI to iLanguage
                Case Break
            Case (sLanguage = "Bulgarian")
                Move LANG_BULGARIAN to iLanguage
                Case Break
            Case (sLanguage = "Catalan")
                Move LANG_CATALAN to iLanguage
                Case Break
            Case (sLanguage = "Chinese")
                Move LANG_CHINESE to iLanguage
                Case Break
            Case (sLanguage = "Croatian")
                Move LANG_CROATIAN to iLanguage
                Case Break
            Case (sLanguage = "Czech")
                Move LANG_CZECH to iLanguage
                Case Break
            Case (sLanguage = "Danish")
                Move LANG_DANISH to iLanguage
                Case Break
            Case (sLanguage = "Divehi")
                Move LANG_DIVEHI to iLanguage
                Case Break
            Case (sLanguage = "Dutch")
                Move LANG_DUTCH to iLanguage
                Case Break
            Case (sLanguage = "English")
                Move LANG_ENGLISH to iLanguage
                Case Break
            Case (sLanguage = "Estonian")
                Move LANG_ESTONIAN to iLanguage
                Case Break
            Case (sLanguage = "Faeroese")
                Move LANG_FAEROESE to iLanguage
                Case Break
            Case (sLanguage = "Farsi")
                Move LANG_FARSI to iLanguage
                Case Break
            Case (sLanguage = "Finnish")
                Move LANG_FINNISH to iLanguage
                Case Break
            Case (sLanguage = "French")
                Move LANG_FRENCH to iLanguage
                Case Break
            Case (sLanguage = "Galician")
                Move LANG_GALICIAN to iLanguage
                Case Break
            Case (sLanguage = "Georgian")
                Move LANG_GEORGIAN to iLanguage
                Case Break
            Case (sLanguage = "German")
                Move LANG_GERMAN to iLanguage
                Case Break
            Case (sLanguage = "Greek")
                Move LANG_GREEK to iLanguage
                Case Break
            Case (sLanguage = "Gujarati")
                Move LANG_GUJARATI to iLanguage
                Case Break
            Case (sLanguage = "Hebrew")
                Move LANG_HEBREW to iLanguage
                Case Break
            Case (sLanguage = "Hindi")
                Move LANG_HINDI to iLanguage
                Case Break
            Case (sLanguage = "Hungarian")
                Move LANG_HUNGARIAN to iLanguage
                Case Break
            Case (sLanguage = "Icelandic")
                Move LANG_ICELANDIC to iLanguage
                Case Break
            Case (sLanguage = "Indonesian")
                Move LANG_INDONESIAN to iLanguage
                Case Break
            Case (sLanguage = "Italian")
                Move LANG_ITALIAN to iLanguage
                Case Break
            Case (sLanguage = "Japanese")
                Move LANG_JAPANESE to iLanguage
                Case Break
            Case (sLanguage = "Kannada")
                Move LANG_KANNADA to iLanguage
                Case Break
            Case (sLanguage = "Kashmiri")
                Move LANG_KASHMIRI to iLanguage
                Case Break
            Case (sLanguage = "Kazak")
                Move LANG_KAZAK to iLanguage
                Case Break
            Case (sLanguage = "Konkani")
                Move LANG_KONKANI to iLanguage
                Case Break
            Case (sLanguage = "Korean")
                Move LANG_KOREAN to iLanguage
                Case Break
            Case (sLanguage = "Kyrgyz")
                Move LANG_KYRGYZ to iLanguage
                Case Break
            Case (sLanguage = "Latvian")
                Move LANG_LATVIAN to iLanguage
                Case Break
            Case (sLanguage = "Lithuanian")
                Move LANG_LITHUANIAN to iLanguage
                Case Break
            Case (sLanguage = "Macedonian")
                Move LANG_MACEDONIAN to iLanguage
                Case Break
            Case (sLanguage = "Malay")
                Move LANG_MALAY to iLanguage
                Case Break
            Case (sLanguage = "Malayalam")
                Move LANG_MALAYALAM to iLanguage
                Case Break
            Case (sLanguage = "Manipuri")
                Move LANG_MANIPURI to iLanguage
                Case Break
            Case (sLanguage = "Marathi")
                Move LANG_MARATHI to iLanguage
                Case Break
            Case (sLanguage = "Mongolian")
                Move LANG_MONGOLIAN to iLanguage
                Case Break
            Case (sLanguage = "Nepali")
                Move LANG_NEPALI to iLanguage
                Case Break
            Case (sLanguage = "Norwegian")
                Move LANG_NORWEGIAN to iLanguage
                Case Break
            Case (sLanguage = "Oriya")
                Move LANG_ORIYA to iLanguage
                Case Break
            Case (sLanguage = "Polish")
                Move LANG_POLISH to iLanguage
                Case Break
            Case (sLanguage = "Portuguese")
                Move LANG_PORTUGUESE to iLanguage
                Case Break
            Case (sLanguage = "Punjabi")
                Move LANG_PUNJABI to iLanguage
                Case Break
            Case (sLanguage = "Romanian")
                Move LANG_ROMANIAN to iLanguage
                Case Break
            Case (sLanguage = "Russian")
                Move LANG_RUSSIAN to iLanguage
                Case Break
            Case (sLanguage = "Sanskrit")
                Move LANG_SANSKRIT to iLanguage
                Case Break
            Case (sLanguage = "Serbian")
                Move LANG_SERBIAN to iLanguage
                Case Break
            Case (sLanguage = "Sindhi")
                Move LANG_SINDHI to iLanguage
                Case Break
            Case (sLanguage = "Slovak")
                Move LANG_SLOVAK to iLanguage
                Case Break
            Case (sLanguage = "Slovenian")
                Move LANG_SLOVENIAN to iLanguage
                Case Break
            Case (sLanguage = "Spanish")
                Move LANG_SPANISH to iLanguage
                Case Break
            Case (sLanguage = "Swahili")
                Move LANG_SWAHILI to iLanguage
                Case Break
            Case (sLanguage = "Swedish")
                Move LANG_SWEDISH to iLanguage
                Case Break
            Case (sLanguage = "Syriac")
                Move LANG_SYRIAC to iLanguage
                Case Break
            Case (sLanguage = "Tamil")
                Move LANG_TAMIL to iLanguage
                Case Break
            Case (sLanguage = "Tatar")
                Move LANG_TATAR to iLanguage
                Case Break
            Case (sLanguage = "Telugu")
                Move LANG_TELUGU to iLanguage
                Case Break
            Case (sLanguage = "Thai")
                Move LANG_THAI to iLanguage
                Case Break
            Case (sLanguage = "Turkish")
                Move LANG_TURKISH to iLanguage
                Case Break
            Case (sLanguage = "Ukrainian")
                Move LANG_UKRAINIAN to iLanguage
                Case Break
            Case (sLanguage = "Urdu")
                Move LANG_URDU to iLanguage
                Case Break
            Case (sLanguage = "Uzbek")
                Move LANG_UZBEK to iLanguage
                Case Break
            Case (sLanguage = "Vietnamese")
                Move LANG_VIETNAMESE to iLanguage
                Case Break
            Case Else
                Move -1 to iLanguage
                Case Break
        Case End

        Function_Return iLanguage
    End_Function

    { MethodType = Property DesignTime = False }
    Function OCXVersion Returns String
        Handle hoVersionInfo
        String sVersionInfo
        String[] sModuleNames
        Integer iVoid iModule iModules iLength
        Integer iVersionMajor iVersionMinor iVersionRelease iVersionBuild
        Boolean bOk

        Get ProcessModules to sModuleNames
        Move (SizeOfArray (sModuleNames)) to iModules
        Decrement iModules
        For iModule from 0 to iModules
            If (sModuleNames[iModule] contains C_DR_OCX_NAME) Begin
                Get Create (RefClass (cVersionInfo)) to hoVersionInfo
                Send DoCreate of hoVersionInfo sModuleNames[iModule]
                Get pbIncluded of hoVersionInfo to bOk
                If (bOk) Begin
                    Get piVersionMajor of hoVersionInfo to iVersionMajor
                    Get piVersionMinor of hoVersionInfo to iVersionMinor
                    Get piVersionRelease of hoVersionInfo to iVersionRelease
                    Get piVersionBuild of hoVersionInfo to iVersionBuild
                    Move (SFormat ("%1.%2.%3.%4", iVersionMajor, iVersionMinor, iVersionRelease, iVersionBuild)) to sVersionInfo
                End
                Send Destroy of hoVersionInfo
                Function_Return sVersionInfo
            End
        Loop

        Function_Return ""
    End_Function

    // Opens a report
    { MethodType = Method }
    Function OpenReport Returns String
        Boolean bOk bCreated bExists bCanceled bAutoLocateDFFiles
        String sReportId sReport sReportPath sDataPath sSep
        Handle hoWorkspace
        #IFDEF IS$WEBAPP
        #ELSE
        Handle hoFocus
        #ENDIF
        Integer iPaths iPath

        Send RedirectErrorsToLocalHandler True

        Set pbCanceled to False // default

        // Create com object if not done yet
        Get IsComObjectCreated to bCreated
        If (not (bCreated)) Begin
            Send CreateComObject
        End

        Move True to bOk

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Send CloseReport sReportId
            Move '' to sReportId
        End

        Send OnPreOpenReport

        // Open report
        Get psReportName to sReport

        Move (SysConf (SYSCONF_DIR_SEPARATOR)) to sSep
        If (Pos (sSep, sReport) > 0) Begin
            Move (DoesFileExist (sReport)) to bExists
        End
        Else Begin
            Move False to bExists
        End

        If (bExists) Begin
            Move sReport to sReportPath
        End
        Else Begin
            Get psReportPath to sReportPath
            If (sReportPath <> "") Begin
                // Make sure path ends with a DirSep before the report name will be added.
                If (Right (sReportPath, 1) <> sSep) Begin
                    Move (sReportPath - sSep) to sReportPath
                End
                Move (sReportPath - sReport) to sReportPath
                Move (DoesFileExist (sReportPath)) to bExists
            End

            If (not (bExists)) Begin
                If (ghoApplication) Begin
                    // If no path was given, see if the report sits in a folder named Reports sub-folder of the workspace root
                    Get ReportsFolder to sReportPath
                    If (sReportPath <> '') Begin
                        Move (sReportPath - sReport) to sReportPath
                        Move (DoesFileExist (sReportPath)) to bExists
                    End

                    If (not (bExists)) Begin
                        // If the report is still not found, see if it resides in one of the datapaths of the workspace
                        Get phoWorkspace of ghoApplication to hoWorkspace
                        Get psDataPath of hoWorkspace to sDataPath
                        Get CountOfPaths of hoWorkspace sDataPath to iPaths
                        // Iterate through each datapath until report is located
                        For iPath from 1 to iPaths
                            Get PathAtIndex of hoWorkspace sDataPath iPath to sReportPath
                            // Make sure path ends with a DirSep before the report name will be added.
                            If (Right (sReportPath, 1) <> sSep) Begin
                                Move (sReportPath - sSep) to sReportPath
                            End
                            Move (sReportPath - sReport) to sReportPath
                            Move (DoesFileExist (sReportPath)) to bExists
                        Until ((bExists) or (iPath = iPaths))
                    End
                End
            End
        End

        If (not (bExists)) Begin
            Move False to bOk
            Error DFERR_DATAFLEX_REPORTS (SFormat (C_$UnabletoLocateReport, sReport))
        End

        // If Report was found, open it.
        If (bOk) Begin
            #IFDEF IS$WEBAPP
            #ELSE
            Send DisplayStatusPanel True
            Send ShowReportLoadingStatusText
            #ENDIF
            // open report
            Get ComReportOpen sReportPath to sReportId
            Move (sReportId <> "") to bOk
            If (bOk) Begin
                Set psReportId to sReportId
                Send InitExportStructures
                Get pbAutoLocateDFFiles to bAutoLocateDFFiles
                If (bAutoLocateDFFiles) Begin
                    Send AutoLocateDFFiles sReportId
                End
            End
            If (not (bOk)) Begin
                Get pbHasErrors to bOk
                If (not (bOk)) Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$ErrorOpeningReport, sReportPath))
                End
            End
        End

        If (bOk) Begin
            // Set report location
            Move (ExtractFilePath (sReportPath)) to sReportPath
            Set psReportLocation to sReportPath
        End

        If (bOk) Begin
            Send OnInitializeReport
            Get pbCanceled to bCanceled
            If (bCanceled) Begin
                Move False to bOk
            End
        End

        // we check pbCanceled once more at the at end of the process. It is possible that OnError is setting this
        // to True and that could happen any time. So we check at the very last moment here.
        If (bOk) Begin
            Get pbCanceled to bCanceled
            If (bCanceled) Begin
                Move False to bOk
            End
        End

        If (not (bOk)) Begin
            If (sReportId <> "") Begin
                Send CloseReport sReportId
                Move "" to sReportId
            End
        End

        Send RedirectErrorsToLocalHandler False

        #IFDEF IS$WEBAPP
        #ELSE
        Send DisplayStatusPanel False
        #ENDIF

        Function_Return sReportId
    End_Function

    // Outputs the report
    { MethodType = Method }
    Procedure OutputReport
        Integer eDestination eExportType
        String sFileName
        Handle hPrintDlg hoExportOptionsDialog

        Send RedirectErrorsToLocalHandler True

        Send RefreshReport

        Get peOutputDestination to eDestination
        Case Begin
            #IFDEF IS$WEBAPP
            #ELSE
            Case (eDestination = PRINT_TO_WINDOW)
                Send DisplayReport
                Case Break
            #ENDIF
            Case (eDestination = PRINT_TO_PRINTER)
                Get phPrintDlg to hPrintDlg
                Send PrintReport hPrintDlg
                Case Break
            Case (eDestination = PRINT_TO_PRINTER_NO_DIALOG)
                Send PrintToDefaultPrinter
                Case Break
            Case (eDestination = PRINT_TO_FILE)
                Get peExportType to eExportType
                If (eExportType >= C_DRPDF and eExportType <= C_DRRTF) Begin
                    Get psExportFileName to sFileName
                    If (sFileName <> "") Begin
                        Send ExportReport eExportType sFileName
                    End
                    #IFDEF IS$WEBAPP
                    #ELSE
                    Else Begin
                        Get phoExportOptionsDialog to hoExportOptionsDialog
                        If (hoExportOptionsDialog <> 0) Begin
                            Send ExportReport of hoExportOptionsDialog Self
                        End
                        Else Begin
                            Error DFERR_DATAFLEX_REPORTS C_$DRNoExportOptionsDialog
                        End
                    End
                    #ENDIF
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRNoValidExportTypeSpecified, eExportType))
                End
                Case Break
            Case Else
                Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRNoValidPrintDestinationDefined, eDestination))
                Case Break
        Case End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Function to retrieve the paper orientation, returns a DMORIENT_ value
    { MethodType = Method }
    Function PaperOrientation String sReportId Returns Integer
        Integer iPaperOrientation
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComPaperOrientation sReportId to iPaperOrientation
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iPaperOrientation
    End_Function

    // Function to retrieve the size of the paper, returns a DMPAPER_ constant
    { MethodType = Method }
    Function PaperSize String sReportId Returns Integer
        Integer iPaperSize
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComPaperSize sReportId to iPaperSize
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iPaperSize
    End_Function

    // Returns the number of parameters defined with the report
    { MethodType = Method }
    Function ParameterCount String sReportId Returns Integer
        Integer iParameters
        Boolean bComObjectCreated

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterCount sReportId to iParameters
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Function_Return iParameters
    End_Function

    // Returns the ID of the parameter whose name is passed to the function
    { MethodType = Method }
    Function ParameterIdByName String sReportId String sParameterName Returns Integer
        Integer iParameterId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterByName sReportId sParameterName to iParameterId
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iParameterId
    End_Function

    // Returns information about a given parameter in a given report. The returned information contains
    // length, type, name, precision (if numeric)
    { MethodType = Method }
    Function ParameterInfo String sReportId Integer iParameter Returns tDRParameter
        tDRParameter ParameterInfo
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterName sReportId iParameter to ParameterInfo.sName
                Get ComParameterType sReportId iParameter to ParameterInfo.iType
                Case Begin
                    Case (ParameterInfo.iType = SQL_INTEGER)
                        Move 10 to ParameterInfo.iLength
                        Case Break
                    Case (ParameterInfo.iType = SQL_DATETIME)
                        Move 23 to ParameterInfo.iLength
                        Case Break
                    Case (ParameterInfo.iType = SQL_TIME)
                    Case (ParameterInfo.iType = SQL_TYPE_TIME)
                    Case (ParameterInfo.iType = SQL_TYPE_TIMESTAMP)
                        Move 8 to ParameterInfo.iLength
                        Case Break
                    Case (ParameterInfo.iType = SQL_TYPE_DATE)
                        Move 10 to ParameterInfo.iLength
                        Case Break
                    Case (ParameterInfo.iType = SQL_NUMERIC)
                    Case (ParameterInfo.iType = SQL_DECIMAL)
                    Case (ParameterInfo.iType = SQL_DOUBLE)
                        Get ComParameterLength sReportId iParameter to ParameterInfo.iLength
                        Get ComParameterPrecision sReportId iParameter to ParameterInfo.iPrecision
                        Case Break
                    Case Else
                        Get ComParameterLength sReportId iParameter to ParameterInfo.iLength
                        Case Break
                Case End
            End
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return ParameterInfo
    End_Function

    // Returns the N-th Parameter name defined in the report
    { MethodType = Method }
    Function ParameterName String sReportId Integer iParameter Returns String
        String sParameterName
        Boolean bComObjectCreated
        Integer iParameters

        If (iParameter < 0) Begin
            Function_Return ''
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterCount sReportId to iParameters
                If (iParameter < iParameters) Begin
                    Get ComParameterName sReportId iParameter to sParameterName
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sParameterName
    End_Function

    // Returns all the information (name, length, type, precision) of the parameters defined in the report
    { MethodType = Method }
    Function Parameters String sReportId Returns tDRParameter[]
        tDRParameter[] ParametersInfo
        Boolean bComObjectCreated
        Integer iParameters iParameter

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterCount sReportId to iParameters
                Decrement iParameters
                For iParameter from 0 to iParameters
                    Get ParameterInfo sReportId iParameter to ParametersInfo[iParameter]
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return ParametersInfo
    End_Function

    // Returns the type of the N-th Parameter defined in the report
    { MethodType = Method }
    Function ParameterType String sReportId Integer iParameter Returns Integer
        Integer iParameterType
        Boolean bComObjectCreated
        Integer iParameters

        If (iParameter < 0) Begin
            Function_Return ''
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterCount sReportId to iParameters
                If (iParameter < iParameters) Begin
                    Get ComParameterType sReportId iParameter to iParameterType
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iParameterType
    End_Function

    // Returns the parent report ID of a certain sub-report. Pass on initial call the
    // psReportId of the cDRReport object as sParentReportId and the report ID of the
    // sub-report as sReportID. Function is called recursively.
    { MethodType = Method }
    Function ParentReportId String sParentReportId String sReportId Returns String
        Integer iSubReports iSubReport
        String sSubReportId sFoundParentReportId

        Get SubReportCount sParentReportId to iSubReports
        Decrement iSubReports
        For iSubReport from 0 to iSubReports
            Get SubReportId sParentReportId iSubReport to sSubReportId
            If (sSubReportId = sReportId) Begin
                Function_Return sParentReportId
            End
            Get ParentReportId sSubReportId sReportId to sFoundParentReportId
            If (sFoundParentReportId <> "") Begin
                Function_Return sFoundParentReportId
            End
        Loop

        Function_Return sFoundParentReportId
    End_Function

    { Visibility = Private }
    Function PDFExportOptionsCorrect DRPDFExportOptions PDFExportOptionsData Returns Boolean
        If (PDFExportOptionsData.iImageQuality < C_DRLow or PDFExportOptionsData.iImageQuality > C_DRHigh) Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRPDFExportInvalidImageQuality
            Function_Return False
        End

        Function_Return True
    End_Function

    #IFDEF IS$WEBAPP
    #ELSE
    // Handles the preview click
    { MethodType = Method }
    Procedure PreviewClick Integer wParam Integer lParam
        Boolean bComObjectCreated
        Handle hWnd
        Integer iResult

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get Window_Handle to hWnd
            If (hWnd <> 0) Begin
                Move (SendMessage (hWnd, WM_LBUTTONDOWN, wParam, lParam)) to iResult
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportDoesNotHaveAWindowHandle, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Finds a word in the preview
    { MethodType = Method }
    Function PreviewFind String sText Boolean bDown Boolean bWholeWord Boolean bMatchCase Returns Boolean
        Boolean bComObjectCreated bFound

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComPreviewFind sText bDown bWholeWord bMatchCase to bFound
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return bFound
    End_Function

    // Resets the preview find operation
    { MethodType = Method }
    Procedure PreviewFindReset
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Send ComPreviewFindReset
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Previews the first page
    { MethodType = Method }
    Procedure PreviewFirstPage
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewFirstPage
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    { MethodType = Method }
    { Visibility = Private }
    Procedure PreviewHScroll Integer iType Integer iPos
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewHScroll iType iPos
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Previews the last page
    { MethodType = Method }
    Procedure PreviewLastPage
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewLastPage
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Previews the next page
    { MethodType = Method }
    Procedure PreviewNextPage
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewNextPage
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Previews the previous page
    { MethodType = Method }
    Procedure PreviewPreviousPage
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewPreviousPage
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    { MethodType = Method }
    { Visibility = Private }
    Procedure PreviewPaint
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewPaint True
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    { MethodType = Method }
    { Visibility = Private }
    Procedure PreviewVScroll Integer iType Integer iPos
        Boolean bComObjectCreated bHasErrors bCancelIfError

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get pbHasErrors to bHasErrors
            Get pbCancelIfError to bCancelIfError
            If (not (bHasErrors) and bCancelIfError) Begin
                Send ComPreviewVScroll iType iPos
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    { MethodType = Property }
    { Visibility = Private }
    { DesignTime = False }
    Procedure Set PreviewWindowHandle Handle hWnd
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Set ComPreviewHWND to hWnd
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure
    #ENDIF

    // Prints the report
    // If the hPrinterDlg parameter is passed as zero DataFlex Reports will
    // popup a print dialog to choose a printer from. When you do not want a printer dialog
    // (for example because the information is stored in a record or file) you need to pass
    // the handle to the PRINTDLGEX structure.
    { MethodType = Method }
    Procedure PrintReport Handle hPrinterDlg
        Boolean bCancel bComObjectCreated
        String sReportId sPrinterName
        Handle hoPrintDialog
        Integer iResult iPaperSize ePaperOrientation iCurrentPage iPages
        #IFDEF IS$WEBAPP
        Integer iFlags
        #ENDIF

        Send RedirectErrorsToLocalHandler True
        Send CheckFunctionErrorInfo

        Set pbCanceled to False

        Send OnPrintReport (&hPrinterDlg)
        Get pbCanceled to bCancel // Developer might have canceled the report
        If (not (bCancel)) Begin
            Get psReportId to sReportId
            If (sReportId = "") Begin
                Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
                Send RedirectErrorsToLocalHandler False
                Procedure_Return
            End

            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                #IFDEF IS$WEBAPP
                #ELSE
                Get piPreviewCurrentPage to iCurrentPage
                #ENDIF
                If (hPrinterDlg <> 0) Begin
                    #IFDEF IS$WEBAPP
                    #ELSE
                    Send DisplayStatusPanel True
                    #ENDIF
                    Send ComReportPrint sReportId hPrinterDlg
                    #IFDEF IS$WEBAPP
                    #ELSE
                    Send DisplayStatusPanel False
                    #ENDIF
                End
                Else Begin
                    Get phoPrintDialog to hoPrintDialog
                    Get ReportPageCount to iPages
                    Set piMaxPage of hoPrintDialog to iPages
                    Send InitPageRanges Of hoPrintDialog iPages
                    Get PaperOrientation sReportID to ePaperOrientation
                    Get PaperSize sReportID to iPaperSize
                    Set pePaperSize of hoPrintDialog to iPaperSize
                    Set peOrientation of hoPrintDialog to ePaperOrientation
                    Get psPrinterName to sPrinterName
                    If (sPrinterName <> "") Begin
                        Get ReadPrinterDevMode of hoPrintDialog sPrinterName to iResult
                        If (iResult = PD_RESULT_CANCEL) Begin
                            #IFDEF IS$WEBAPP
                            #ELSE
                            Get PrintDialog of hoPrintDialog to iResult
                            #ENDIF
                        End
                    End
                    Else Begin
                        #IFDEF IS$WEBAPP
                        Get piFlags of hoPrintDialog to iFlags
                        Set piFlags of hoPrintDialog to (PD_RETURNDEFAULT ior PD_NOPAGENUMS)
                        #ENDIF
                        Get PrintDialog of hoPrintDialog to iResult
                        #IFDEF IS$WEBAPP
                        Set piFlags of hoPrintDialog to iFlags
                        #ENDIF
                    End
                    If (iResult = PD_RESULT_PRINT) Begin
                        Get phPrintDlg of hoPrintDialog to hPrinterDlg
                        If (hPrinterDlg <> 0) Begin
                            #IFDEF IS$WEBAPP
                            #ELSE
                            Send DisplayStatusPanel True
                            #ENDIF
                            Send ComReportPrint sReportId hPrinterDlg
                            #IFDEF IS$WEBAPP
                            #ELSE
                            Send DisplayStatusPanel False
                            #ENDIF
                        End
                    End
                    Else Begin
                        Set pbCanceled to True
                    End
                End
                #IFDEF IS$WEBAPP
                #ELSE
                Set piPreviewCurrentPage to iCurrentPage
                #ENDIF
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Send OnPostPrintReport
        Send CheckFunctionErrorInfo

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Helper method to print to the default printer
    { MethodType = Method }
    Procedure PrintToDefaultPrinter
        Handle hoPrintDialog hPrintDlg
        Integer iResult iFlags

        Get phoPrintDialog to hoPrintDialog
        If (hoPrintDialog <> 0) Begin
            Get piFlags of hoPrintDialog to iFlags
            Set piFlags of hoPrintDialog to (PD_RETURNDEFAULT ior PD_NOPAGENUMS)
            Get PrintDialog of hoPrintDialog to iResult
            If (iResult = PD_RESULT_PRINT) Begin
                Get phPrintDlg of hoPrintDialog to hPrintDlg
                Send PrintReport hPrintDlg
            End
            Set piFlags of hoPrintDialog to iFlags
        End
    End_Procedure

    // Produces a list of tablenames inside main report and sub-reports
    { MethodType = Method }
    Function RDSTableNames String sReportId Returns tDRTableName[]
        Integer eDatabaseMainType iTables iTable iElement
        tDRTableName[] ReportTableNames

        Get DatabaseMainType sReportId to eDatabaseMainType
        If (eDatabaseMainType = C_DRRDS) Begin
            Get TableCount sReportId to iTables
            Decrement iTables
            For iTable from 0 to iTables
                Move iTable to ReportTableNames[iElement].iTable
                Move sReportId to ReportTableNames[iElement].sReportId
                Get psTableName sReportId iTable to ReportTableNames[iElement].sTableName
                Increment iElement
            Loop
        End

        Function_Return ReportTableNames
    End_Function

    // Returns the number of sort fields defined in the report
    { MethodType = Method }
    Function RecordSortCount String sReportId Returns Integer
        Integer iSortCount
        Boolean bComObjectCreated

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iSortCount
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Function_Return iSortCount
    End_Function

    // Refreshes the report; all data will be read again, pages are reformatted
    { MethodType = Method }
    Procedure RefreshReport
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True
        Send CheckFunctionErrorInfo

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                #IFDEF IS$WEBAPP
                #ELSE
                Send DisplayStatusPanel True
                #ENDIF
                Send OnDefineFilters
                Send ComReportRefresh sReportId
                #IFDEF IS$WEBAPP
                #ELSE
                Send DisplayStatusPanel False
                #ENDIF
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send CheckFunctionErrorInfo
        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Removes all predefined record sort fields from the report
    { MethodType = Method }
    Procedure RemoveAllFilters String sReportId
        Integer iFilters
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId to iFilters
                Decrement iFilters
                While (iFilters >= 0)
                    Send ComRecordFilterDelete sReportId iFilters
                    Decrement iFilters
                Loop
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Removes all predefined record sort fields from the report
    { MethodType = Method }
    Procedure RemoveAllRecordSortFields String sReportId
        Integer iRecordSortFields
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iRecordSortFields
                Decrement iRecordSortFields
                While (iRecordSortFields >= 0)
                    Send ComRecordSortDelete sReportId iRecordSortFields
                    Decrement iRecordSortFields
                Loop
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Removes the N-th defined filter in the report. Tests if the passed filter number is defined
    // in the report.
    { MethodType = Method }
    Function RemoveFilter String sReportId Integer iFilter Returns Boolean
        Integer iFiltersBefore iFiltersAfter
        Boolean bComObjectCreated bSuccess

        If (iFilter < 0) Begin
            Function_Return False
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId to iFiltersBefore
                If (iFilter < iFiltersBefore) Begin
                    Send ComRecordFilterDelete sReportId iFilter
                    Get ComRecordFilterCount sReportId to iFiltersAfter
                    Move (iFiltersAfter <> iFiltersBefore) to bSuccess
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return bSuccess
    End_Function

    // Removes the N-th defined record sort order in the report. Tests if the passed
    // Sort Field Number is defined in the report.
    { MethodType = Method }
    Function RemoveRecordSortField String sReportId Integer iSortFieldIndex Returns Boolean
        Integer iRecordSortCountBefore iRecordSortCountAfter
        Boolean bComObjectCreated bSuccess

        If (iSortFieldIndex < 0) Begin
            Function_Return False
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iRecordSortCountBefore
                If (iSortFieldIndex < iRecordSortCountBefore) Begin
                    Send ComRecordSortDelete sReportId iSortFieldIndex
                    Get ComRecordSortCount sReportId to iRecordSortCountAfter
                    Move (iRecordSortCountAfter <> iRecordSortCountBefore) to bSuccess
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return bSuccess
    End_Function

    Function ReportCacheFileName String sExtension Returns String
        String sCacheFolder sHEXUUID sCacheFileName

        Get ReportsCacheFolder to sCacheFolder
        If (sCacheFolder <> '') Begin
            Get RandomHexUUID to sHEXUUID
            Move (sCacheFolder + sHEXUUID + sExtension) to sCacheFileName
        End

        If (sCacheFileName = '') Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRUnableToProvideCacheFileName
        End

        Function_Return sCacheFileName
    End_Function

    // This function enumerates the passed report and it's sub-reports for a function by name and returns
    // a structure in which the report id of the (sub) report is stored and the function number. By this
    // it is more powerfull than FunctionIdByName that only looks in one report at the time.
    { MethodType = Method }
    Function ReportIdForFunction String sReportId String sFunctionName Returns tReportFunctionId
        Integer iSubReports iSubReport
        String sSubReportId
        tReportFunctionId ReportFunctionId

        Get FunctionIdByName sReportId sFunctionName to ReportFunctionId.iFunction
        If (ReportFunctionId.iFunction <= -1) Begin
            Get SubReportCount sReportId to iSubReports
            If (iSubReports > 0) Begin
                Decrement iSubReports
                For iSubReport from 0 to iSubReports
                    Get SubReportId sReportId iSubReport to sSubReportId
                    Get ReportIdForFunction sSubReportId sFunctionName to ReportFunctionId
                    If (ReportFunctionId.iFunction >= 0) Begin
                        Function_Return ReportFunctionId
                    End
                Loop
            End
        End
        Else Begin
            Move sReportId to ReportFunctionId.sReportId
        End

        Function_Return ReportFunctionId
    End_Function

    { MethodType = Method }
    Function ReportIdsForFunction String sReportId String sFunctionName Returns tReportFunctionId[]
        tReportFunctionId[] ReportFunctionIds

        Send CollectReportIdsForFunction sReportId sFunctionName (&ReportFunctionIds)

        Function_Return ReportFunctionIds
    End_Function

    { MethodType = Method }
    Function ReportIdsForParameter String sReportId String sParameterName Returns tReportParameterId[]
        tReportParameterId[] ReportParameterIds

        Send CollectReportIdsForParameter sReportId sParameterName (&ReportParameterIds)

        Function_Return ReportParameterIds
    End_Function

    // Returns an array of language IDs loaded from an optional available language.db file
    { MethodType = Method Visibility = Private }
    Function ReportLanguageList String sReportId Returns Integer[]
        Integer[] iLanguages
        Boolean bComObjectCreated

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComReportLanguageList sReportId to iLanguages
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Function_Return iLanguages
    End_Function

    // Returns the number of pages for the current report
    // Warning: The count can take some time to complete and return
    { MethodType = Method }
    Function ReportPageCount Returns Integer
        Integer iPages
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComReportPageCount sReportId to iPages
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iPages
    End_Function

    // Returns the SQL Query instruction for ODBC / SQLite based reports after one time executed
    { MethodType = Method }
    Function ReportQuery String sReportId Returns String
        String sQuery sReportName
        Boolean bComObjectCreated
        Integer eDatabaseMainType

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get DatabaseMainType sReportId to eDatabaseMainType
                If (eDatabaseMainType = C_DRODBC or eDatabaseMainType = C_DRSQLite) Begin
                    Get ComReportQuery sReportId to sQuery
                End
                Else Begin
                    Get psReportName to sReportName
                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRNoODBCDatabaseType, sReportName))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sQuery
    End_Function

    // This function retrieves the reports folder and if this exists it checks if there is
    // a sub-folder with the name Cache and if that folder exists. If so the full pathname is returned.
    Function ReportsCacheFolder Returns String
        String sReportsFolder sCacheFolder
        Boolean bIsDirectory

        Get ReportsFolder to sReportsFolder
        If (sReportsFolder <> '') Begin
            If (Right (sReportsFolder, 1) <> SysConf (SYSCONF_DIR_SEPARATOR)) Begin
                Move (sReportsFolder - SysConf (SYSCONF_DIR_SEPARATOR)) to sReportsFolder
            End

            Move (sReportsFolder - "Cache\") to sCacheFolder
            Get IsDirectory sCacheFolder to bIsDirectory
            If (bIsDirectory) Begin
                Function_Return sCacheFolder
            End
        End

        Function_Return ''
    End_Function

    // Attempts to map a DataFlex application table.column reference to a report table.column
    // reference.
    // Expected usage:
    //    Get ReportTableColumnName sReportId File_Field Customer.Name to sTableColumnName
    //    Above returns either a blank string when not found or a {Customer.Name}
    Function ReportTableColumnName String sReportId Handle hTable Handle hColumn Returns String
        Boolean bOpened
        String sTableName sColumnName sTableColumnName
        String sReportTableName sReportTableColumnName
        Integer iTables iTable iColumns iColumn

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get_Attribute DF_FILE_OPENED of hTable to bOpened
            If (bOpened) Begin
                Get DataFlexTableName hTable to sTableName
                Get_Attribute DF_FIELD_NAME of hTable hColumn to sColumnName

                Get TableCount sReportId to iTables
                Move 0 to iTable
                While (iTable < iTables and sTableColumnName = "")
                    Get psTableName sReportId iTable to sReportTableName
                    If (Uppercase (sReportTableName) = Uppercase (sTableName)) Begin
                        Get TableColumnCount sReportId iTable to iColumns
                        Move 0 to iColumn
                        While (iColumn < iColumns and sTableColumnName = "")
                            Get TableColumnName sReportId iTable iColumn to sReportTableColumnName
                            If (Uppercase (sReportTableColumnName) = Uppercase (sColumnName)) Begin
                                Get TableAliasName sReportId iTable to sTableName
                                Move ("{" - sReportTableName - "." - sReportTableColumnName - "}") to sTableColumnName
                            End
                            Increment iColumn
                        Loop
                    End
                    Increment iTable
                Loop
            End
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sTableColumnName
    End_Function

    // This function retrieves the home folder of the workspace. Then it checks if there
    // is a folder named 'Reports' inside this folder. If so the full path to that folder
    // will be returned
    Function ReportsFolder Returns String
        Handle hoWorkspace
        String sHomeFolder sReportsFolder
        Boolean bIsDirectory

        If (ghoApplication <> 0) Begin
            Get phoWorkspace of ghoApplication to hoWorkspace
            Get psHome of hoWorkspace to sHomeFolder
            If (Right (sHomeFolder, 1) <> SysConf (SYSCONF_DIR_SEPARATOR)) Begin
                Move (sHomeFolder - SysConf (SYSCONF_DIR_SEPARATOR)) to sHomeFolder
            End

            Move (sHomeFolder - "Reports\") to sReportsFolder
            Get IsDirectory sReportsFolder to bIsDirectory
            If (bIsDirectory) Begin
                Function_Return sReportsFolder
            End
        End

        Function_Return ''
    End_Function

    // Quick function to test if the main report or any of the sub-reports uses ODBC as database type
    { MethodType = Method }
    Function ReportUsesODBC String sReportId Returns Boolean
        Integer eDatabaseMainType iSubReports iSubReport
        String sSubReportId
        Boolean bODBCBasedReport

        Get DatabaseMainType sReportId to eDatabaseMainType
        If (eDatabaseMainType = C_DRODBC) Begin
            Move True to bODBCBasedReport
        End
        Else Begin
            Get SubReportCount sReportId to iSubReports
            Decrement iSubReports
            For iSubReport from 0 to iSubReports
                Get SubReportId sReportId iSubReport to sSubReportId
                Get ReportUsesODBC sSubReportId to bODBCBasedReport
                If (bODBCBasedReport) ;
                    Break
            Loop
        End

        Function_Return bODBCBasedReport
    End_Function

    // Quick function to test if the main report or any of the sub-reports uses RDS as database type
    { MethodType = Method }
    Function ReportUsesRDS String sReportId Returns Boolean
        Integer eDatabaseMainType iSubReports iSubReport
        String sSubReportId
        Boolean bRDSBasedReport

        Get DatabaseMainType sReportId to eDatabaseMainType
        If (eDatabaseMainType = C_DRRDS) Begin
            Move True to bRDSBasedReport
        End
        Else Begin
            Get SubReportCount sReportId to iSubReports
            Decrement iSubReports
            For iSubReport from 0 to iSubReports
                Get SubReportId sReportId iSubReport to sSubReportId
                Get ReportUsesRDS sSubReportId to bRDSBasedReport
                If (bRDSBasedReport) ;
                    Break
            Loop
        End

        Function_Return bRDSBasedReport
    End_Function

    // Quick function to test if the main report or any of the sub-reports uses Stored Procedures as database type
    { MethodType = Method }
    Function ReportUsesStoredProcedures String sReportId Returns Boolean
        Integer eDatabaseMainType eDatabaseSubType iSubReports iSubReport
        String sSubReportId
        Boolean bSPBasedReport

        Get DatabaseMainType sReportId to eDatabaseMainType
        Get DatabaseSubType sReportId to eDatabaseSubType
        If (eDatabaseMainType = C_DRODBC and eDatabaseSubType = C_DRSP) Begin
            Move True to bSPBasedReport
        End
        Else Begin
            Get SubReportCount sReportId to iSubReports
            Decrement iSubReports
            For iSubReport from 0 to iSubReports
                Get SubReportId sReportId iSubReport to sSubReportId
                Get ReportUsesStoredProcedures sSubReportId to bSPBasedReport
                If (bSPBasedReport) ;
                    Break
            Loop
        End

        Function_Return bSPBasedReport
    End_Function

    { Visibility = Private }
    { Description = "Resets the pFunctionErrorInfo property. This property can be set by OnComFunctionError." }
    Procedure ResetFunctionErrorInfo
        tDRFunctionErrorInfo FunctionErrorInfo

        Set pFunctionErrorInfo to FunctionErrorInfo
    End_Procedure

    { Visibility = Private }
    Function RTFExportOptionsCorrect DRRTFExportOptions RTFExportOptionsData Returns Boolean
        Integer iPageCount

        If (not (RTFExportOptionsData.bAllPages)) Begin
            Get ReportPageCount to iPageCount
            If (RTFExportOptionsData.iPage < 1 or RTFExportOptionsData.iPage > iPageCount) Begin
                Error DFERR_DATAFLEX_REPORTS C_$DRHTMLExportInvalidPageNumber
                Function_Return False
            End
        End

        Function_Return True
    End_Function

    // Runs the report. Uses OutputReport to determine the result location
    { MethodType = Method }
    Procedure RunReport
        String sReportId

        Set pbHasErrors to False

        Get OpenReport to sReportId
        If (sReportId <> "") Begin
            Send OutputReport
        End
    End_Procedure

    // Assigns a default class identifier to the phcPreviewer property if not set by the developer
    { MethodType = Method }
    Procedure SaveReportAs String sReportId String sFileName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Send ComReportSaveAs sReportId sFileName
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    // Assigns a default class identifier to the phcPreviewer property if not set by the developer
    { MethodType = Method }
    Procedure SetDefaultPreviewerClass
        Integer ePreviewStyle
        Handle hcPreviewer

        Get phcPreviewer to hcPreviewer
        If (hcPreviewer = 0) Begin
            Get pePreviewStyle to ePreviewStyle
            Case Begin
                Case (ePreviewStyle = C_DRPREVIEW_VIEW)
                    Set phcPreviewer to (RefClass (cDRPreview))
                    Case Break
                Case (ePreviewStyle = C_DRPREVIEW_TOOLPANEL)
                    Set phcPreviewer to (RefClass (cDRToolPanelPreview))
                    Case Break
                Case (ePreviewStyle = C_DRPREVIEW_DESKTOPVIEW)
                    Set phcPreviewer to (RefClass (cDRDesktopPreview))
                    Case Break
            Case End
        End
    End_Procedure
    #ENDIF

    #IFDEF IS$WEBAPP
    #ELSE
    // If the statuspanel is defined show the loading text.
    { Visibility = Private }
    Procedure ShowReportLoadingStatusText
        Boolean bShowStatusPanel bIsActive
        Handle hoStatusPanel
        Integer eDelegationMode

        Get pbShowStatusPanel to bShowStatusPanel
        If (bShowStatusPanel) Begin
            Get phoStatusPanel to hoStatusPanel
            If (hoStatusPanel <> 0) Begin
                Get Active_State of hoStatusPanel to bIsActive
                If (bIsActive) Begin
                    Register_Procedure SetStatusText
                    Get Delegation_Mode of hoStatusPanel to eDelegationMode
                    Set Delegation_Mode of hoStatusPanel to No_Delegate_Or_Error
                    Send SetStatusText of hoStatusPanel C_$DRLoadingReportPleaseWait
                    Set Delegation_Mode of hoStatusPanel to eDelegationMode
                End
            End
        End
    End_Procedure
    #ENDIF

    // Convert the passed language name (e.g. en-US and nl-NL) to a Locale ID. Set the report language
    // to the language part of the identifier and use the Locale ID for a parameter named as passed when
    // the parameter exists.
    { MethodType = Method }
    Procedure SetReportLocaleAndLanguage String sReportId WString wLanguage String sParameterName
        Integer iParameterId iLCID

        Move (DR_WinAPI_LocaleNameToLCID (AddressOf (wLanguage), LOCALE_ALLOW_NEUTRAL_NAMES)) to iLCID
        Set piReportLanguage "" to (Mod (iLCID, 1024))

        If (sParameterName <> "") Begin
            Get ParameterIdByName sReportId sParameterName to iParameterId
            If (iParameterId <> -1) Begin
                Set psParameterValue sReportID iParameterId to iLCID
            End
        End
    End_Procedure

    // Returns the number of sub-reports in the report
    // When the first parameter is blank we take the main report id which means
    // that when you want to get the number of sub-reports of a subreport you have to
    // pass the reportid of the subreport
    { MethodType = Method }
    Function SubReportCount String sReportId Returns Integer
        Integer iSubReports
        Boolean bComObjectCreated

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComSubreportCount sReportId to iSubReports
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Function_Return iSubReports
    End_Function

    // Returns the ID of the subreport indicated by subreport number (0..N)
    // When the first parameter is blank we take the main report id which means
    // that when you want to get the Nth subreport ID of a subreport you have to
    // pass the reportid of the subreport
    { MethodType = Method }
    Function SubReportId String sReportId Integer iSubReport Returns String
        String sSubReportId
        Integer iSubReportCount
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get SubReportCount sReportId to iSubReportCount
            If (iSubReport < 0 or iSubReport > iSubReportCount) Begin
                Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSubReportNumberPassed, iSubReport))
            End
            Else Begin
                Get IsComObjectCreated to bComObjectCreated
                If (bComObjectCreated) Begin
                    Get ComSubreportId sReportId iSubReport to sSubReportId
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
                End
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sSubReportId
    End_Function

    // Returns the ID of the sub-report whose name is identical to the passed name
    // If multiple sub-reports have the same name the first sub-report with this name
    // will be returned
    { MethodType = Method }
    Function SubReportIDByName String sReportId String sSubReportName Returns String
        Integer iSubReports iSubReport
        String sSubReportId sReportName sReturnedReportId

        If (sReportId = '') Begin
            Get psReportId to sReportId
        End

        Get SubReportCount sReportId to iSubReports
        Decrement iSubReports
        For iSubReport from 0 to iSubReports
            Get SubReportId sReportId iSubReport to sSubReportId
            Get ComReportName sSubReportId to sReportName
            If (Lowercase (sReportName) = Lowercase (sSubReportName)) Begin
                Function_Return sSubReportId
            End
            Get SubReportIDByName sSubReportId sSubReportName to sReturnedReportId
            If (sReturnedReportId <> "") Begin
                Function_Return sReturnedReportId
            End
        Loop

        // This will only happen if no sub-report can be found with the passed name
        Function_Return ''
    End_Function

    // Returns the alias name for a table. When two tables are included with same base tablename
    // an alias name was entered in the report designer
    { MethodType = Method }
    Function TableAliasName String sReportId Integer iTable Returns String
        Integer iTables
        String sTableAliasName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComTableNameAlias sReportId iTable to sTableAliasName
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sTableAliasName
    End_Function

    // Returns the number of columns of a specific table in the report definition
    { MethodType = Method }
    Function TableColumnCount String sReportId Integer iTable Returns Integer
        Integer iTables iColumns
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComColumnCount sReportId iTable to iColumns
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iColumns
    End_Function

    // Returns the index number (if any) assigned to a column in one of the report's table definitions
    { MethodType = Method }
    Function TableColumnIndex String sReportId Integer iTable Integer iColumn Returns Integer
        Integer iTables iColumns iIndex
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComColumnCount sReportId iTable to iColumns
                    If (iColumn < iColumns and iColumn >= 0) Begin
                        Get ComColumnIndex sReportId iTable iColumn to iIndex
                    End
                    Else Begin
                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iIndex
    End_Function

    // Returns the length defined for a particular column in one of the tables defined in the report
    { MethodType = Method }
    Function TableColumnLength String sReportId Integer iTable Integer iColumn Returns Integer
        Integer iTables iColumns iLength
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComColumnCount sReportId iTable to iColumns
                    If (iColumn < iColumns and iColumn >= 0) Begin
                        Get ComColumnLength sReportId iTable iColumn to iLength
                    End
                    Else Begin
                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iLength
    End_Function

    // Returns the name of the column for one of the tables in the report definition
    { MethodType = Method }
    Function TableColumnName String sReportId Integer iTable Integer iColumn Returns String
        Integer iTables iColumns
        String sColumnName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComColumnCount sReportId iTable to iColumns
                    If (iColumn < iColumns and iColumn >= 0) Begin
                        Get ComColumnName sReportId iTable iColumn to sColumnName
                    End
                    Else Begin
                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sColumnName
    End_Function

    // Returns the number of decimals after the decimal separator for a column in one the report's table definitions
    { MethodType = Method }
    Function TableColumnPrecision String sReportId Integer iTable Integer iColumn Returns Integer
        Integer iTables iColumns iPrecision
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComColumnCount sReportId iTable to iColumns
                    If (iColumn < iColumns and iColumn >= 0) Begin
                        Get ComColumnPrecision sReportId iTable iColumn to iPrecision
                    End
                    Else Begin
                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iPrecision
    End_Function

    // Returns the type of a column for one of the tables in the report. The value is one of the SQL
    // datatypes defined in SQLDatatypes.h.pkg
    { MethodType = Method }
    Function TableColumnType String sReportId Integer iTable Integer iColumn Returns C_drColumnType
        Integer iTables iColumns eType
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComColumnCount sReportId iTable to iColumns
                    If (iColumn < iColumns and iColumn >= 0) Begin
                        Get ComColumnType sReportId iTable iColumn to eType
                    End
                    Else Begin
                        Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidColumnNumberPassed, iColumn))
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eType
    End_Function

    // Returns the number of tables in the report
    { MethodType = Method }
    Function TableCount String sReportId Returns Integer
        Integer iTables
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iTables
    End_Function

    // Use this method to pass the data of the variant array to the RDS handler in the print engine
    { MethodType = Method }
    Procedure TableData String sReportId Integer iTable Variant[][] vTableData
        Boolean bComObjectCreated
        Integer iTables eDatabaseMainType

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get DatabaseMainType sReportId to eDatabaseMainType
                If (eDatabaseMainType = C_DRRDS) Begin
                    Get ComTableCount sReportId to iTables
                    If (iTable < iTables and iTable >= 0) Begin
                        Send ComTableData sReportId iTable vTableData
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRNotTheCorrectDatabaseType, Name (Self)))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Loops through all tables of a report and if any of its table names matches
    // with the passed table name (case insensitive) it will return its offset/number
    { MethodType = Method }
    Function TableNumber String sReportId String sTableName Returns Integer
        Integer iTables iTable
        String  sReportTableName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTables > 0) Begin
                    Decrement iTables
                    Move (Uppercase (sTableName)) to sTableName
                    For iTable from 0 to iTables
                        Get ComTableNameAlias sReportId iTable to sReportTableName
                        If (Uppercase (sReportTableName) = sTableName) Begin
                            Send RedirectErrorsToLocalHandler False
                            Function_Return iTable
                        End
                    Loop
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return -1
    End_Function

    // Developers can override this function to return a different name, especially
    // in case of P.SQL this make sense
    { MethodType = Method }
    Function DataFlexTableName Handle hTable Returns String
        String sDriver sTableName

        Get_Attribute DF_FILE_DRIVER of hTable to sDriver
        Case Begin
            Case (sDriver = "DATAFLEX")
                // DataFlex Reports works with the tablename on disk
                Get_Attribute DF_FILE_ROOT_NAME of hTable to sTableName
                Case Break
            Case (sDriver = "MSSQLDRV")
            Case (sDriver = "DB2_DRV")
            Case (sDriver = "ODBC_DRV")
                // Returns the name of the table specified in the INT file
                Get_Attribute DF_FILE_TABLE_NAME of hTable to sTableName
                Case Break
            Case (sDriver = "DFBTRDRV")
                // rootname most likely contains DFBTRDRV or .INT
                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTableName
                Case Break
        Case End

        Function_Return sTableName
    End_Function

    // This method can be used to find out if the syntax of a certain filterfunction is correct
    { MethodType = Method }
    Function TestFilterFunction String sReportId String sFilterFunction Returns Boolean
        Integer iError
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFunctionCheck sReportId sFilterFunction -1 to iError
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return (iError = 0)
    End_Function

    // Use this function to convert a time variable to string. Should be used for psParameterValue.
    { MethodType = Method }
    Function TimeToString Time tmValue Returns String
        String sTimeResult

        Get TimeToString of oDRReportHelper tmValue to sTimeResult

        Function_Return sTimeResult
    End_Function

    // Use this method to count the number of parameters in a report and its sub-reports.
    // Use the ParameterCount function to count the parameters of a specific report only
    { MethodType = Method }
    Function TotalParameterCount String sReportId Returns Integer
        Boolean bComObjectCreated
        Integer iParameterCount iSubReportParameterCount iSubReports iSubReport
        String sSubReportId

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ParameterCount sReportId to iParameterCount
                Get SubReportCount sReportId to iSubReports
                If (iSubReports > 0) Begin
                    Decrement iSubReports
                    For iSubReport from 0 to iSubReports
                        Get SubReportId sReportId iSubReport to sSubReportId
                        Get TotalParameterCount sSubReportId to iSubReportParameterCount
                        Move (iSubReportParameterCount + iParameterCount) to iParameterCount
                    Loop
                End
            End
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iParameterCount
    End_Function

    { MethodType = Method }
    Function DRDate DateTime dtValue Returns String
        String sResult

        Move ("DateSerial (" + String (DateGetYear (dtValue)) + "," + String (DateGetMonth (dtValue)) + ","  + String (DateGetDay (dtValue)) + ")") to sResult

        Function_Return sResult
    End_Function

    { MethodType = Method }
    Function DRInteger Integer iValue Returns String
        String sResult

        Move ('CInt ("' + String (iValue) + '")') to sResult

        Function_Return sResult
    End_Function

    { MethodType = Method }
    Function DRNumber Number nValue Returns String
        String sResult

        Move ('CDbl ("' + String (nValue) + '")') to sResult

        Function_Return sResult
    End_Function

    { MethodType = Method }
    Function DRString String sValue Returns String
        String sResult

        Move ('CStr ("' + sValue + '")') to sResult

        Function_Return sResult
    End_Function

    { Visibility = Private }
    Function XLSExportOptionsCorrect DRXLSExportOptions XLSExportOptionsData Returns Boolean
        If (XLSExportOptionsData.iXLSVersion < C_DRXLS2003 or XLSExportOptionsData.iXLSVersion > C_DRXLS2007) Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRXLSVersionNumberIncorrect
            Function_Return False
        End

        If (XLSExportOptionsData.iNewSheet < C_DRNoSheets or XLSExportOptionsData.iNewSheet > C_DRSheetsPage) Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRXLSNewSheetOptionIncorrect
            Function_Return False
        End

        If (XLSExportOptionsData.iColumnWidth < 5 or XLSExportOptionsData.iColumnWidth > 999) Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRXLSIncorrectColumnWidth
            Function_Return False
        End

        Function_Return True
    End_Function

    // ********** PUBLIC PROPERTIES *************

    // Passes the struct with export options to the COM integration
    { MethodType = Property DesignTime = False }
    Procedure Set pCSVExportOptions DRCSVExportOptions CSVExportOptionsData
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Send ComCSVExportOptions sReportId (AddressOf (CSVExportOptionsData))
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Should be:
    // for C_DRDF: The DF_OPEN_PATH
    // for C_DRODBC or C_DRSQLite: The ODBC connectionstring,
    //   eg: DSN=Dynamic AI Library Demo;DBQ=C:\Program Files\Dynamic AI\Dat\Dynamic AI Library Demo.mdb;DriverId=25;FIL=MS Access;MaxBufferSize=2048;PageTimeout=5;
    { MethodType = Property DesignTime = False }
    Procedure Set psDatabaseConnection String sReportId String sConnectionString
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComDatabaseConnection sReportId to sConnectionString
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Should be:
    // for C_DRDF: The DF_OPEN_PATH
    // for C_DRODBC or C_DRSP: The ODBC connectionstring,
    //   eg: DSN=Dynamic AI Library Demo;DBQ=C:\Program Files\Dynamic AI\Dat\Dynamic AI Library Demo.mdb;DriverId=25;FIL=MS Access;MaxBufferSize=2048;PageTimeout=5;
    { MethodType = Property DesignTime = False }
    Function psDatabaseConnection String sReportId Returns String
        String sConnectionString
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComDatabaseConnection sReportId to sConnectionString
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sConnectionString
    End_Function

    // Should be:
    // for C_DRDF: The path to the filelist in case that the filelist is used or
    //              the first table in case individual tables are selected
    // for C_DRODBC or C_DRSQLite: The name of the DSN
    { MethodType = Property DesignTime = False }
    Procedure Set psDatabaseName String sReportId String sDatabaseName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComDatabaseName sReportId to sDatabaseName
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns:
    // for C_DRDF: The path to the filelist in case that the filelist is used or
    //               the first table in case individual tables are selected
    // for C_DRODBC or C_DRSQLite: The name of the DSN
    { MethodType = Property DesignTime = False }
    Function psDatabaseName String sReportId Returns String
        String sDatabaseName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComDatabaseName sReportId to sDatabaseName
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sDatabaseName
    End_Function

    // Sets the filter value of the N-th filter in the report
    // This relates to the filter expert in DR itself
    { MethodType = Property DesignTime = False }
    Procedure Set psFilterField String sReportId Integer iFilter String sFilterField
        Boolean bComObjectCreated
        Integer iFilters

        If (iFilter < 0) Begin
            Procedure_Return
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId sReportId to iFilters
                If (iFilter < iFilters) Begin
                    Set ComRecordFilterField sReportId iFilter to sFilterField
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the filter value of the N-th filter in the report
    // This relates to the filter expert in DR itself
    { MethodType = Property DesignTime = False }
    Function psFilterField String sReportId Integer iFilter Returns String
        String sFilterField
        Boolean bComObjectCreated
        Integer iFilters

        If (iFilter < 0) Begin
            Function_Return ''
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId sReportId to iFilters
                If (iFilter < iFilters) Begin
                    Get ComRecordFilterField sReportId iFilter to sFilterField
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sFilterField
    End_Procedure

    // Sets the filter function of the loaded report. Use it for AND/OR
    // constructions and for functions that need to Use expressions
    // This relates to the filter function functionality in DR
    { MethodType = Property DesignTime = False }
    Procedure Set psFilterFunction String sReportId String sFilterFunction
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComFilterFunction sReportId to sFilterFunction
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the filter function string active in the loaded report
    // The equivalent of this function in DataFlex Reports is the Filter Function dialog
    { MethodType = Property DesignTime = False }
    Function psFilterFunction String sReportId Returns String
        String sFilterFunction
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFilterFunction sReportId to sFilterFunction
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sFilterFunction
    End_Function

    // Returns the filter operator (EQ, NE etc) for the N-th filter in defined in the
    // report at the filter expert dialog
    { MethodType = Property DesignTime = False }
    Function peFilterOperator String sReportId Integer iFilter Returns Integer
        Integer eFilterOperator
        Boolean bComObjectCreated
        Integer iFilters

        If (iFilter < 0) Begin
            Function_Return -1
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId sReportId to iFilters
                If (iFilter < iFilters) Begin
                    Get ComRecordFilterOperator sReportId iFilter to eFilterOperator
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eFilterOperator
    End_Function

    // Returns the filter operator (EQ, NE etc) for the N-th filter in defined in the
    // report at the filter expert dialog
    { MethodType = Property DesignTime = False }
    Procedure Set peFilterOperator String sReportId Integer iFilter C_DROperators eFilterOperator
        Boolean bComObjectCreated
        Integer iFilters

        If (iFilter < 0) Begin
            Procedure_Return
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId sReportId to iFilters
                If (iFilter < iFilters) Begin
                    Set ComRecordFilterOperator sReportId iFilter to eFilterOperator
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Sets the filter value of the N-th filter in the report
    // This relates to the filter expert in DR itself
    { MethodType = Property DesignTime = False }
    Procedure Set psFilterValue String sReportId Integer iFilter String sFilterValue
        Boolean bComObjectCreated
        Integer iFilters

        If (iFilter < 0) Begin
            Procedure_Return
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId sReportId to iFilters
                If (iFilter < iFilters) Begin
                    Set ComRecordFilterValue sReportId iFilter to sFilterValue
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the filter value of the N-th filter in the report
    // This relates to the filter expert in DR itself
    { MethodType = Property DesignTime = False }
    Function psFilterValue String sReportId Integer iFilter Returns String
        String sFilterValue
        Boolean bComObjectCreated
        Integer iFilters

        If (iFilter < 0) Begin
            Function_Return ''
        End

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordFilterCount sReportId sReportId to iFilters
                If (iFilter < iFilters) Begin
                    Get ComRecordFilterValue sReportId iFilter to sFilterValue
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sFilterValue
    End_Procedure

    // Returns the contents of a function in the report
    { MethodType = Property DesignTime = False }
    Function psFunction String sReportId String sFunctionName Returns String
        Integer iFunctionId
        String sFunction

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get FunctionIdByName sReportId sFunctionName to iFunctionId
            If (iFunctionId >= 0) Begin
                Get ComFunction sReportId iFunctionId to sFunction
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRFunctionNotFound, sFunctionName))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sFunction
    End_Function

    // Changes the contents of the N-th function in the report
    { MethodType = Property DesignTime = False }
    Procedure Set psFunction String sReportId String sFunctionName String sFunction
        Integer iFunctionId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get FunctionIdByName sReportId sFunctionName to iFunctionId
            If (iFunctionId >= 0) Begin
                Get IsComObjectCreated to bComObjectCreated
                If (bComObjectCreated) Begin
                    Set ComFunction sReportId iFunctionId to sFunction
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRFunctionNotFound, sFunctionName))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the name of the N-th function in the report
    { MethodType = Property DesignTime = False }
    Function psFunctionName String sReportId Integer iIndex Returns String
        String sFunctionName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComFunctionName sReportId iIndex to sFunctionName
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sFunctionName
    End_Function

    // Changes the name of the N-th function in the report
    { MethodType = Property DesignTime = False }
    Procedure Set psFunctionName String sReportId Integer iIndex String sFunctionName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComFunctionName sReportId iIndex to sFunctionName
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Passes the struct with export options to the COM integration
    { MethodType = Property DesignTime = False }
    Procedure Set pHTMLExportOptions DRHTMLExportOptions HTMLExportOptionsData
        String sReportId
        Boolean bComObjectCreated bOptionsOk

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get HTMLExportOptionsCorrect HTMLExportOptionsData to bOptionsOk
                If (not (bOptionsOk)) Begin
                    Get DefaultHTMLExportOptions to HTMLExportOptionsData
                End
                Send ComHTMLExportOptions sReportId (AddressOf (HTMLExportOptionsData))
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Passes the struct with export options to the COM integration
    { MethodType = Property DesignTime = False }
    Procedure Set pImageExportOptions DRImageExportOptions ImageExportOptionsData
        String sReportId
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Send ComImageExportOptions sReportId (AddressOf (ImageExportOptionsData))
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Function piPaperMarginBottom String sReportId Returns Integer
        Integer iBottomMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComPaperMarginBottom sReportId to iBottomMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iBottomMargin
    End_Function

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Procedure Set piPaperMarginBottom String sReportId Integer iBottomMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComPaperMarginBottom sReportId to iBottomMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Function piPaperMarginLeft String sReportId Returns Integer
        Integer iLeftMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComPaperMarginLeft sReportId to iLeftMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iLeftMargin
    End_Function

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Procedure Set piPaperMarginLeft String sReportId Integer iLeftMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComPaperMarginLeft sReportId to iLeftMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Function piPaperMarginRight String sReportId Returns Integer
        Integer iRightMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComPaperMarginRight sReportId to iRightMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iRightMargin
    End_Function

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Procedure Set piPaperMarginRight String sReportId Integer iRightMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComPaperMarginRight sReportId to iRightMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Function piPaperMarginTop String sReportId Returns Integer
        Integer iTopMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComPaperMarginTop sReportId to iTopMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iTopMargin
    End_Function

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Procedure Set piPaperMarginTop String sReportId Integer iTopMargin
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Set ComPaperMarginTop sReportId to iTopMargin
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Function psParameterValue String sReportId Integer iParameter Returns String
        String sParameterValue
        Integer iParameters
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterCount sReportId to iParameters
                If (iParameter < iParameters and iParameter >= 0) Begin
                    Get ComParameterValue sReportId iParameter to sParameterValue
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidParameternumberPassed, iParameter))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sParameterValue
    End_Function

    // Changes the value of the N-th parameter in the report
    { MethodType = Property DesignTime = False }
    Procedure Set psParameterValue String sReportId Integer iParameter String sParameterValue
        Boolean bComObjectCreated
        Integer iParameters

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComParameterCount sReportId to iParameters
                If (iParameter < iParameters and iParameter >= 0) Begin
                    Set ComParameterValue sReportId iParameter to sParameterValue
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidParameternumberPassed, iParameter))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Passes the struct with export options to the COM interface
    { MethodType = Property DesignTime = False }
    Procedure Set pPDFExportOptions DRPDFExportOptions PDFExportOptionsData
        String sReportId
        Boolean bComObjectCreated bOptionsOk

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get PDFExportOptionsCorrect PDFExportOptionsData to bOptionsOk
                If (not (bOptionsOk)) Begin
                    Get DefaultPDFExportOptions to PDFExportOptionsData
                End
                Send ComPDFExportOptions sReportId (AddressOf (PDFExportOptionsData))
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    #IFDEF IS$WEBAPP
    #ELSE
    { MethodType = Property InitialValue = clLtGray }
    { PropertyType = Color }
    { EnumList = "clScrollBar, clBackground, clActiveCaption, clInactiveCaption, clMenu, clWindow" }
    { EnumList += "clWindowFrame, clMenuText, clWindowText, clCaptionText, clActiveBorder" }
    { EnumList += "clInactiveBorder, clAppWorkSpace, clHighlight, clHighlightText, clBtnFace" }
    { EnumList += "clBtnShadow, clGrayText, clBtnText, clInactiveCaptionText, clBtnHighlight" }
    { EnumList += "cl3DDkShadow, cl3DLight, clInfoText, clInfoBk, clDefault, clNone" }
    { EnumList += "clAqua, clBlack, clBlue, clDkGray, clFuchsia, clGray, clGreen, clLime, clLtGray" }
    { EnumList += "clMaroon, clNavy, clOlive, clPurple, clRed, clSilver, clTeal, clWhite, clYellow" }
    { Category = "Output" }
    Function piPreviewCanvasColor Returns Integer
        Boolean bComObjectCreated
        Integer ePreviewCanvasColor

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComPreviewCanvasColor to ePreviewCanvasColor
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return ePreviewCanvasColor
    End_Function

    { MethodType = Property InitialValue = clLtGray }
    { PropertyType = Color }
    { EnumList = "clScrollBar, clBackground, clActiveCaption, clInactiveCaption, clMenu, clWindow" }
    { EnumList += "clWindowFrame, clMenuText, clWindowText, clCaptionText, clActiveBorder" }
    { EnumList += "clInactiveBorder, clAppWorkSpace, clHighlight, clHighlightText, clBtnFace" }
    { EnumList += "clBtnShadow, clGrayText, clBtnText, clInactiveCaptionText, clBtnHighlight" }
    { EnumList += "cl3DDkShadow, cl3DLight, clInfoText, clInfoBk, clDefault, clNone" }
    { EnumList += "clAqua, clBlack, clBlue, clDkGray, clFuchsia, clGray, clGreen, clLime, clLtGray" }
    { EnumList += "clMaroon, clNavy, clOlive, clPurple, clRed, clSilver, clTeal, clWhite, clYellow" }
    { Category = "Output" }
    Procedure Set piPreviewCanvasColor Integer ePreviewCanvasColor
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Set ComPreviewCanvasColor to ePreviewCanvasColor
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    { MethodType = Property InitialValue = 0 }
    { Category = "Output" }
    Function phoPreviewContainer Returns Handle
        Handle hoPreviewContainer

        Get private.phoPreviewContainer to hoPreviewContainer
        Get Object_Id of hoPreviewContainer to hoPreviewContainer

        Function_Return hoPreviewContainer
    End_Function

    { MethodType = Property InitialValue = 0 }
    { Category = "Output" }
    Procedure Set phoPreviewContainer Handle hoPreviewContainer
        Set private.phoPreviewContainer to hoPreviewContainer
    End_Procedure

    // Set preview page number
    { MethodType = Property DesignTime = False InitialValue = 1 }
    Procedure Set piPreviewCurrentPage Integer iPage
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Set ComPreviewCurrentPage to iPage
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns preview page number
    { MethodType = Property DesignTime = False InitialValue = 1 }
    Function piPreviewCurrentPage Returns Integer
        Integer iPageNumber
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComPreviewCurrentPage to iPageNumber
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iPageNumber
    End_Function

    { EnumList = "C_DRPREVIEW_MODAL, C_DRPREVIEW_VIEW, C_DRPREVIEW_EMBEDDED, C_DRPREVIEW_TOOLPANEL, C_DRPREVIEW_DESKTOPVIEW" }
    { Description = "Style of the preview; modal, view, toolpanel, desktopview or embedded" }
    { Category = "Output" }
    { MethodType = Property InitialValue = C_DRPREVIEW_VIEW }
    Procedure Set pePreviewStyle Integer ePreviewStyle
        Handle hoPreviewContainer

        Set Private.pePreviewStyle to ePreviewStyle
        Get phoPreviewContainer to hoPreviewContainer
        If (hoPreviewContainer <> 0) Begin
            Send ClosePreviewer
            Set phoPreviewContainer to 0
        End
        Send SetDefaultPreviewerClass
    End_Procedure

    { MethodType = Property InitialValue = C_DRPREVIEW_VIEW }
    Function pePreviewStyle Returns Integer
        Integer ePreviewStyle

        Get Private.pePreviewStyle to ePreviewStyle

        Function_Return ePreviewStyle
    End_Function

    // Sets a waiting GIF (animated GIF)
    Procedure Set psPreviewWaitingGIF String sFileName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Set ComPreviewWaitingGIF to sFileName
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Retrieves the name of the used Waiting GIF
    Function psPreviewWaitingGIF Returns String
        String sFileName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComPreviewWaitingGIF to sFileName
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sFileName
    End_Function

    // Set preview zoom factor
    { MethodType = Property DesignTime = False InitialValue = 100 }
    Procedure Set piPreviewZoom Integer iPreviewZoomFactor
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            If (iPreviewZoomFactor = -1 or iPreviewZoomFactor = -2 or (iPreviewZoomFactor >= 25 and iPreviewZoomFactor <= 500)) Begin
                Set ComPreviewZoom to iPreviewZoomFactor
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (sFormat (C_$DRReportZoomFactorRangeExceeded, iPreviewZoomFactor))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns preview zoom factor
    { MethodType = Property DesignTime = False InitialValue = 100 }
    Function piPreviewZoom Returns Integer
        Integer iPreviewZoomFactor
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComPreviewZoom to iPreviewZoomFactor
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iPreviewZoomFactor
    End_Function
    #ENDIF

    // Returns the sort field name of the N-th sort field in the report
    { MethodType = Property DesignTime = False }
    Function psRecordSortField String sReportId Integer iSortFieldIndex Returns String
        Integer iSortCount
        String sSortField
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iSortCount
                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
                    Get ComRecordSortField sReportId iSortFieldIndex to sSortField
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sSortField
    End_Function

    // Changes the name of the N-th sort field defined in the report
    { MethodType = Property DesignTime = False }
    Procedure Set psRecordSortField String sReportId Integer iSortFieldIndex String sSortField
        Boolean bComObjectCreated
        Integer iSortCount

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iSortCount
                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
                    Set ComRecordSortField sReportId iSortFieldIndex to sSortField
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the sort field name of the N-th sort field in the report
    { MethodType = Property DesignTime = False }
    Function peRecordSortOrder String sReportId Integer iSortFieldIndex Returns C_DRSortOrders
        Integer eSortOrder iSortCount
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iSortCount
                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
                    Get ComRecordSortOrder sReportId iSortFieldIndex to eSortOrder
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return eSortOrder
    End_Function

    // Changes the sort operator (ascending / descending) of the N-th sort field defined in the report
    // The sortorder passed must be ascending or descending
    { MethodType = Property DesignTime = False }
    Procedure Set peRecordSortOrder String sReportId Integer iSortFieldIndex C_DRSortOrders eSortOrder
        Boolean bComObjectCreated
        Integer iSortCount

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComRecordSortCount sReportId to iSortCount
                If (iSortFieldIndex < iSortCount and iSortFieldIndex >= 0) Begin
                    If (eSortOrder = C_DRAscending or eSortOrder = C_DRDescending) Begin
                        Set ComRecordSortOrder sReportId iSortFieldIndex to eSortOrder
                    End
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidSortFieldIndexPassed, iSortFieldIndex))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the language set for the report
    { MethodType = Property DesignTime = False InitialValue = 0 }
    Function piReportLanguage String sReportId Returns Integer
        Integer iReportLanguage
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Get ComReportLanguage sReportId to iReportLanguage
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return iReportLanguage
    End_Function

    // Returns the language set for the report
    { MethodType = Property DesignTime = False InitialValue = 0 }
    Procedure Set piReportLanguage String sReportId Integer iReportLanguage
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        Get IsComObjectCreated to bComObjectCreated
        If (bComObjectCreated) Begin
            Set ComReportLanguage sReportId to iReportLanguage
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the Nth table name
    { MethodType = Property DesignTime = False }
    Function psTableName String sReportId Integer iTable Returns String
        Integer iTables
        String sTableName
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComTableName sReportId iTable to sTableName
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sTableName
    End_Function

    // Sets the Nth table name
    { MethodType = Property DesignTime = False }
    Procedure Set psTableName String sReportId Integer iTable String sTableName
        Boolean bComObjectCreated
        Integer iTables

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Set ComTableName sReportId iTable to sTableName
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Returns the Nth table schema. Declares an error when the table number passed is outside
    // the actual table range.
    // The returned value should be:
    // for C_DRDF: Empty when table opened via filelist, the path to the table when tables are
    //               opened as individual tables
    // for C_DRODBC: The table schema if available
    // for C_DRSQLite: The table schema if available
    // for C_DRRDS: The table schema name is identical to the table name (psTableName).
    { MethodType = Property DesignTime = False }
    Function psTableSchema String sReportId Integer iTable Returns String
        Integer iTables
        String sSchema
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables and iTable >= 0) Begin
                    Get ComTableSchema sReportId iTable to sSchema
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False

        Function_Return sSchema
    End_Function

    // Sets the Nth table schema. Declares an error when the table number passed is outside
    // the actual table range.
    // The value should be:
    // for C_DRDF: Empty when table opened via filelist, the path to the table when tables are
    //               opened as individual tables
    // for C_DRODBC: The table schema if applicable
    // for C_DRSQLite: The table schema if applicable
    { MethodType = Property DesignTime = False }
    Procedure Set psTableSchema String sReportId Integer iTable String sSchema
        Integer iTables
        Boolean bComObjectCreated

        Send RedirectErrorsToLocalHandler True

        If (sReportId = C_USEMAINDRREPORTID) Begin
            Get psReportId to sReportId
        End

        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get ComTableCount sReportId to iTables
                If (iTable < iTables) Begin
                    Set ComTableSchema sReportId iTable to sSchema
                End
                Else Begin
                    Error DFERR_DATAFLEX_REPORTS (SFormat (C_$DRInvalidTablenumberPassed, iTable))
                End
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Passes the struct with export options to the COM integration
    { MethodType = Property DesignTime = False }
    Procedure Set pRTFExportOptions DRRTFExportOptions RTFExportOptionsData
        String sReportId
        Boolean bComObjectCreated bOptionsOk

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get RTFExportOptionsCorrect RTFExportOptionsData to bOptionsOk
                If (not (bOptionsOk)) Begin
                    Get DefaultRTFExportOptions to RTFExportOptionsData
                End
                Send ComRTFExportOptions sReportId (AddressOf (RTFExportOptionsData))
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure

    // Passes the struct with export options to the COM integration
    { MethodType = Property DesignTime = False }
    Procedure Set pXLSExportOptions DRXLSExportOptions XLSExportOptionsData
        String sReportId
        Boolean bComObjectCreated bOptionsOk

        Send RedirectErrorsToLocalHandler True

        Get psReportId to sReportId
        If (sReportId <> "") Begin
            Get IsComObjectCreated to bComObjectCreated
            If (bComObjectCreated) Begin
                Get XLSExportOptionsCorrect XLSExportOptionsData to bOptionsOk
                If (not (bOptionsOk)) Begin
                    Get DefaultXLSExportOptions to XLSExportOptionsData
                End
                Send ComXLSExportOptions sReportId (AddressOf (XLSExportOptionsData))
            End
            Else Begin
                Error DFERR_DATAFLEX_REPORTS (Sformat (C_$DRReportOCXNotInitialised, Name (Self)))
            End
        End
        Else Begin
            Error DFERR_DATAFLEX_REPORTS C_$DRNoReportIdSpecified
        End

        Send RedirectErrorsToLocalHandler False
    End_Procedure
End_Class
